
blue_usb_midi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  08004c20  08004c20  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c20  08004c20  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000124  08004d4c  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  08004d4c  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9c5  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e3  00000000  00000000  0002fb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  00032bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f04  00000000  00000000  00033450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adf8  00000000  00000000  00049354  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cf90  00000000  00000000  0005414c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c10dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002558  00000000  00000000  000c1158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000124 	.word	0x20000124
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ba4 	.word	0x08004ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000128 	.word	0x20000128
 8000148:	08004ba4 	.word	0x08004ba4

0800014c <midi_note_send>:

int sequence[8] = {69, 71, 72, 74, 76, 77, 79, 80};
uint8_t midi_channel = 0;

void midi_note_send(uint8_t channel, bool on, uint8_t note, uint8_t velocity)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4604      	mov	r4, r0
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4623      	mov	r3, r4
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	4603      	mov	r3, r0
 8000160:	71bb      	strb	r3, [r7, #6]
 8000162:	460b      	mov	r3, r1
 8000164:	717b      	strb	r3, [r7, #5]
 8000166:	4613      	mov	r3, r2
 8000168:	713b      	strb	r3, [r7, #4]
	uint8_t msg[4] = {0};
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]

	if(on)
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d007      	beq.n	8000184 <midi_note_send+0x38>
	{
		msg[0] = 0x09;           /* USB frame */
 8000174:	2309      	movs	r3, #9
 8000176:	733b      	strb	r3, [r7, #12]
		msg[1] = 0x90 | channel; /* Command and channel */
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800017e:	b2db      	uxtb	r3, r3
 8000180:	737b      	strb	r3, [r7, #13]
 8000182:	e006      	b.n	8000192 <midi_note_send+0x46>
	}
	else
	{
		msg[0] = 0x08;            /* USB frame */
 8000184:	2308      	movs	r3, #8
 8000186:	733b      	strb	r3, [r7, #12]
		msg[1] = 0x80 | channel;  /* Command and channel */
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800018e:	b2db      	uxtb	r3, r3
 8000190:	737b      	strb	r3, [r7, #13]
	}

	msg[2] = note > 127 ? 127 : note;
 8000192:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000196:	2b00      	cmp	r3, #0
 8000198:	db01      	blt.n	800019e <midi_note_send+0x52>
 800019a:	797b      	ldrb	r3, [r7, #5]
 800019c:	e000      	b.n	80001a0 <midi_note_send+0x54>
 800019e:	237f      	movs	r3, #127	; 0x7f
 80001a0:	73bb      	strb	r3, [r7, #14]
	msg[3] = velocity > 127 ? 127 : velocity;
 80001a2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	db01      	blt.n	80001ae <midi_note_send+0x62>
 80001aa:	793b      	ldrb	r3, [r7, #4]
 80001ac:	e000      	b.n	80001b0 <midi_note_send+0x64>
 80001ae:	237f      	movs	r3, #127	; 0x7f
 80001b0:	73fb      	strb	r3, [r7, #15]

	USBD_LL_Transmit (&hUsbDeviceFS, MIDI_IN_EP,(uint8_t*)msg, 4);
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	2304      	movs	r3, #4
 80001b8:	2181      	movs	r1, #129	; 0x81
 80001ba:	4803      	ldr	r0, [pc, #12]	; (80001c8 <midi_note_send+0x7c>)
 80001bc:	f004 fc48 	bl	8004a50 <USBD_LL_Transmit>
}
 80001c0:	bf00      	nop
 80001c2:	3714      	adds	r7, #20
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd90      	pop	{r4, r7, pc}
 80001c8:	20000294 	.word	0x20000294

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa83 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f857 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8b1 	bl	8000340 <MX_GPIO_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80001de:	2200      	movs	r2, #0
 80001e0:	4923      	ldr	r1, [pc, #140]	; (8000270 <main+0xa4>)
 80001e2:	4824      	ldr	r0, [pc, #144]	; (8000274 <main+0xa8>)
 80001e4:	f003 f8d2 	bl	800338c <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 80001e8:	4923      	ldr	r1, [pc, #140]	; (8000278 <main+0xac>)
 80001ea:	4822      	ldr	r0, [pc, #136]	; (8000274 <main+0xa8>)
 80001ec:	f003 f8f9 	bl	80033e2 <USBD_RegisterClass>
  USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80001f0:	4922      	ldr	r1, [pc, #136]	; (800027c <main+0xb0>)
 80001f2:	4820      	ldr	r0, [pc, #128]	; (8000274 <main+0xa8>)
 80001f4:	f000 f9fa 	bl	80005ec <USBD_MIDI_RegisterInterface>
  USBD_Start(&hUsbDeviceFS);
 80001f8:	481e      	ldr	r0, [pc, #120]	; (8000274 <main+0xa8>)
 80001fa:	f003 f90b 	bl	8003414 <USBD_Start>

	uint8_t noteOn[4];
	noteOn[0] = 0x09;
 80001fe:	2309      	movs	r3, #9
 8000200:	723b      	strb	r3, [r7, #8]
	noteOn[1] = 0x90;
 8000202:	2390      	movs	r3, #144	; 0x90
 8000204:	727b      	strb	r3, [r7, #9]
	noteOn[2] = 0x47;
 8000206:	2347      	movs	r3, #71	; 0x47
 8000208:	72bb      	strb	r3, [r7, #10]
	noteOn[3] = 0x47;
 800020a:	2347      	movs	r3, #71	; 0x47
 800020c:	72fb      	strb	r3, [r7, #11]

	uint8_t noteOff[4];
	noteOff[0] = 0x08;
 800020e:	2308      	movs	r3, #8
 8000210:	713b      	strb	r3, [r7, #4]
	noteOff[1] = 0x80;
 8000212:	2380      	movs	r3, #128	; 0x80
 8000214:	717b      	strb	r3, [r7, #5]
	noteOff[2] = 0x47;
 8000216:	2347      	movs	r3, #71	; 0x47
 8000218:	71bb      	strb	r3, [r7, #6]
	noteOff[3] = 0x47;
 800021a:	2347      	movs	r3, #71	; 0x47
 800021c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 8; ++i)
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e020      	b.n	8000266 <main+0x9a>
	  {
		  midi_note_send(midi_channel, true, sequence[i], 127);
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <main+0xb4>)
 8000226:	7818      	ldrb	r0, [r3, #0]
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <main+0xb8>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	237f      	movs	r3, #127	; 0x7f
 8000234:	2101      	movs	r1, #1
 8000236:	f7ff ff89 	bl	800014c <midi_note_send>
		  HAL_Delay(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 faaf 	bl	80007a0 <HAL_Delay>
		  midi_note_send(midi_channel, false, sequence[i], 127);
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0xb4>)
 8000244:	7818      	ldrb	r0, [r3, #0]
 8000246:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0xb8>)
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	237f      	movs	r3, #127	; 0x7f
 8000252:	2100      	movs	r1, #0
 8000254:	f7ff ff7a 	bl	800014c <midi_note_send>
		  HAL_Delay(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025c:	f000 faa0 	bl	80007a0 <HAL_Delay>
	  for(int i = 0; i < 8; ++i)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3301      	adds	r3, #1
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b07      	cmp	r3, #7
 800026a:	dddb      	ble.n	8000224 <main+0x58>
 800026c:	e7d7      	b.n	800021e <main+0x52>
 800026e:	bf00      	nop
 8000270:	200000d4 	.word	0x200000d4
 8000274:	20000294 	.word	0x20000294
 8000278:	20000024 	.word	0x20000024
 800027c:	200000c4 	.word	0x200000c4
 8000280:	20000140 	.word	0x20000140
 8000284:	20000000 	.word	0x20000000

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b094      	sub	sp, #80	; 0x50
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fc7c 	bl	8004b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fa5a 	bl	8001798 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ea:	f000 f84b 	bl	8000384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fcc4 	bl	8001c98 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000316:	f000 f835 	bl	8000384 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031a:	2310      	movs	r3, #16
 800031c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800031e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000322:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fe20 	bl	8001f6c <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000332:	f000 f827 	bl	8000384 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3750      	adds	r7, #80	; 0x50
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <MX_GPIO_Init+0x40>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0320 	and.w	r3, r3, #32
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_GPIO_Init+0x40>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <MX_GPIO_Init+0x40>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_GPIO_Init+0x40>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <HardFault_Handler+0x4>

08000406 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <BusFault_Handler+0x4>

08000412 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <UsageFault_Handler+0x4>

08000418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f992 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800044e:	f000 fbdd 	bl	8000c0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000758 	.word	0x20000758

0800045c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000462:	f000 fbd3 	bl	8000c0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000758 	.word	0x20000758

08000470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <SystemInit+0x5c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <SystemInit+0x5c>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <SystemInit+0x5c>)
 8000482:	685a      	ldr	r2, [r3, #4]
 8000484:	4911      	ldr	r1, [pc, #68]	; (80004cc <SystemInit+0x5c>)
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <SystemInit+0x60>)
 8000488:	4013      	ands	r3, r2
 800048a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <SystemInit+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <SystemInit+0x5c>)
 8000492:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800049a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <SystemInit+0x5c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <SystemInit+0x5c>)
 80004a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <SystemInit+0x5c>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <SystemInit+0x5c>)
 80004ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <SystemInit+0x5c>)
 80004b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <SystemInit+0x64>)
 80004be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	f8ff0000 	.word	0xf8ff0000
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <USBD_MIDI_Init+0x40>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80004ea:	2340      	movs	r3, #64	; 0x40
 80004ec:	2202      	movs	r2, #2
 80004ee:	2181      	movs	r1, #129	; 0x81
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f004 f9e6 	bl	80048c2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	2202      	movs	r2, #2
 80004fa:	2101      	movs	r1, #1
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f004 f9e0 	bl	80048c2 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8000502:	2340      	movs	r3, #64	; 0x40
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <USBD_MIDI_Init+0x44>)
 8000506:	2101      	movs	r1, #1
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f004 fac4 	bl	8004a96 <USBD_LL_PrepareReceive>
  return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000144 	.word	0x20000144
 800051c:	20000150 	.word	0x20000150

08000520 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <USBD_MIDI_DeInit+0x2c>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8000532:	2181      	movs	r1, #129	; 0x81
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f004 f9ea 	bl	800490e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800053a:	2101      	movs	r1, #1
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f004 f9e6 	bl	800490e <USBD_LL_CloseEP>
  return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000144 	.word	0x20000144

08000550 <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <USBD_MIDI_DataIn+0x28>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <USBD_MIDI_DataIn+0x28>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000014c 	.word	0x2000014c

0800057c <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800058e:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	330a      	adds	r3, #10
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	4413      	add	r3, r2
 800059e:	3304      	adds	r3, #4
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	897a      	ldrh	r2, [r7, #10]
 80005aa:	4611      	mov	r1, r2
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <USBD_MIDI_DataOut+0x4c>)
 80005ae:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80005b0:	2340      	movs	r3, #64	; 0x40
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <USBD_MIDI_DataOut+0x4c>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f004 fa6d 	bl	8004a96 <USBD_LL_PrepareReceive>
  return USBD_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000150 	.word	0x20000150

080005cc <USBD_MIDI_GetCfgDesc>:
    USB_Tx_State = 1;
    USBD_LL_Transmit (pInstance, MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
  }
}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2265      	movs	r2, #101	; 0x65
 80005d8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000005c 	.word	0x2000005c

080005ec <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 80005f6:	2302      	movs	r3, #2
 80005f8:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d005      	beq.n	800060c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MIDI_DataRx>:
  MIDI_DataRx,
  MIDI_DataTx
};
 
static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
//							sus = data;
//							break;
//					}
//          break;
//  }
	return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <MIDI_DataTx>:
{
	MIDI_DataTx(msg, length);
}

static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 8000640:	e017      	b.n	8000672 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	441a      	add	r2, r3
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MIDI_DataTx+0x58>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	7811      	ldrb	r1, [r2, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MIDI_DataTx+0x5c>)
 8000650:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MIDI_DataTx+0x58>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <MIDI_DataTx+0x58>)
 800065a:	6013      	str	r3, [r2, #0]
    i++;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MIDI_DataTx+0x58>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800066a:	d102      	bne.n	8000672 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MIDI_DataTx+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	d3e3      	bcc.n	8000642 <MIDI_DataTx+0x12>
    }
  }
  return USBD_OK;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000148 	.word	0x20000148
 800068c:	20000190 	.word	0x20000190

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000690:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000692:	e003      	b.n	800069c <LoopCopyDataInit>

08000694 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000696:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000698:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069a:	3104      	adds	r1, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a4:	d3f6      	bcc.n	8000694 <CopyDataInit>
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a8:	e002      	b.n	80006b0 <LoopFillZerobss>

080006aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006ac:	f842 3b04 	str.w	r3, [r2], #4

080006b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b4:	d3f9      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff fedb 	bl	8000470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f004 fa47 	bl	8004b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fd85 	bl	80001cc <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r3, =_sidata
 80006c4:	08004c28 	.word	0x08004c28
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006cc:	20000124 	.word	0x20000124
  ldr r2, =_sbss
 80006d0:	20000124 	.word	0x20000124
  ldr r3, = _ebss
 80006d4:	200009c4 	.word	0x200009c4

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f945 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fe4a 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f95d 	bl	80009e6 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f925 	bl	8000992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000020 	.word	0x20000020
 8000760:	200000d0 	.word	0x200000d0
 8000764:	200000cc 	.word	0x200000cc

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000d0 	.word	0x200000d0
 8000788:	20000290 	.word	0x20000290

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000290 	.word	0x20000290

080007a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff fff0 	bl	800078c <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_Delay+0x40>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffe0 	bl	800078c <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000d0 	.word	0x200000d0

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <__NVIC_EnableIRQ+0x34>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff90 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff2d 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff42 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff35 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa2 	bl	8000938 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a00:	b08b      	sub	sp, #44	; 0x2c
 8000a02:	af06      	add	r7, sp, #24
 8000a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e0d3      	b.n	8000bb8 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f003 fe2d 	bl	8004684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb75 	bl	8002126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	687e      	ldr	r6, [r7, #4]
 8000a44:	466d      	mov	r5, sp
 8000a46:	f106 0410 	add.w	r4, r6, #16
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	602b      	str	r3, [r5, #0]
 8000a52:	1d33      	adds	r3, r6, #4
 8000a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a56:	6838      	ldr	r0, [r7, #0]
 8000a58:	f001 fb3e 	bl	80020d8 <USB_CoreInit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e0a4      	b.n	8000bb8 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fb72 	bl	800215e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e035      	b.n	8000aec <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	4413      	add	r3, r2
 8000a88:	3329      	adds	r3, #41	; 0x29
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	015b      	lsls	r3, r3, #5
 8000a94:	4413      	add	r3, r2
 8000a96:	3328      	adds	r3, #40	; 0x28
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	b291      	uxth	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3336      	adds	r3, #54	; 0x36
 8000aaa:	460a      	mov	r2, r1
 8000aac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	015b      	lsls	r3, r3, #5
 8000ab4:	4413      	add	r3, r2
 8000ab6:	332b      	adds	r3, #43	; 0x2b
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	015b      	lsls	r3, r3, #5
 8000ac2:	4413      	add	r3, r2
 8000ac4:	3338      	adds	r3, #56	; 0x38
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	015b      	lsls	r3, r3, #5
 8000ad0:	4413      	add	r3, r2
 8000ad2:	333c      	adds	r3, #60	; 0x3c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	015b      	lsls	r3, r3, #5
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	7bfa      	ldrb	r2, [r7, #15]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3c4      	bcc.n	8000a80 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e031      	b.n	8000b60 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	015b      	lsls	r3, r3, #5
 8000b02:	4413      	add	r3, r2
 8000b04:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	015b      	lsls	r3, r3, #5
 8000b12:	4413      	add	r3, r2
 8000b14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	015b      	lsls	r3, r3, #5
 8000b22:	4413      	add	r3, r2
 8000b24:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	015b      	lsls	r3, r3, #5
 8000b32:	4413      	add	r3, r2
 8000b34:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	015b      	lsls	r3, r3, #5
 8000b42:	4413      	add	r3, r2
 8000b44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	330a      	adds	r3, #10
 8000b52:	015b      	lsls	r3, r3, #5
 8000b54:	4413      	add	r3, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3c8      	bcc.n	8000afc <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	687e      	ldr	r6, [r7, #4]
 8000b72:	466d      	mov	r5, sp
 8000b74:	f106 0410 	add.w	r4, r6, #16
 8000b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	602b      	str	r3, [r5, #0]
 8000b80:	1d33      	adds	r3, r6, #4
 8000b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b84:	6838      	ldr	r0, [r7, #0]
 8000b86:	f001 faf6 	bl	8002176 <USB_DevInit>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d005      	beq.n	8000b9c <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2202      	movs	r2, #2
 8000b94:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e00d      	b.n	8000bb8 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 fb34 	bl	800321e <USB_DevDisconnect>

  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <HAL_PCD_Start+0x16>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e016      	b.n	8000c04 <HAL_PCD_Start+0x44>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f003 ff7b 	bl	8004adc <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fb0d 	bl	800320a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fa7f 	bl	80020f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fb0a 	bl	8003232 <USB_ReadInterrupts>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c28:	d102      	bne.n	8000c30 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fade 	bl	80011ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fafc 	bl	8003232 <USB_ReadInterrupts>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c44:	d112      	bne.n	8000c6c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c58:	b292      	uxth	r2, r2
 8000c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f003 fd8d 	bl	800477e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c64:	2100      	movs	r1, #0
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f8de 	bl	8000e28 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 fade 	bl	8003232 <USB_ReadInterrupts>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c80:	d10b      	bne.n	8000c9a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000c94:	b292      	uxth	r2, r2
 8000c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fac7 	bl	8003232 <USB_ReadInterrupts>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cae:	d10b      	bne.n	8000cc8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 fab0 	bl	8003232 <USB_ReadInterrupts>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cdc:	d126      	bne.n	8000d2c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0204 	bic.w	r2, r2, #4
 8000cf0:	b292      	uxth	r2, r2
 8000cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0208 	bic.w	r2, r2, #8
 8000d08:	b292      	uxth	r2, r2
 8000d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f003 fd6e 	bl	80047f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d26:	b292      	uxth	r2, r2
 8000d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fa7e 	bl	8003232 <USB_ReadInterrupts>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d40:	d13d      	bne.n	8000dbe <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0208 	orr.w	r2, r2, #8
 8000d54:	b292      	uxth	r2, r2
 8000d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d6c:	b292      	uxth	r2, r2
 8000d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0204 	orr.w	r2, r2, #4
 8000d84:	b292      	uxth	r2, r2
 8000d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fa4f 	bl	8003232 <USB_ReadInterrupts>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d9e:	d10b      	bne.n	8000db8 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000db2:	b292      	uxth	r2, r2
 8000db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f003 fcff 	bl	80047bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fa35 	bl	8003232 <USB_ReadInterrupts>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dd2:	d10e      	bne.n	8000df2 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000de6:	b292      	uxth	r2, r2
 8000de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f003 fcb8 	bl	8004762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fa1b 	bl	8003232 <USB_ReadInterrupts>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e06:	d10b      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_PCD_SetAddress+0x1a>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e013      	b.n	8000e6a <HAL_PCD_SetAddress+0x42>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	78fa      	ldrb	r2, [r7, #3]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 f9c2 	bl	80031e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	70fb      	strb	r3, [r7, #3]
 8000e84:	460b      	mov	r3, r1
 8000e86:	803b      	strh	r3, [r7, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da0b      	bge.n	8000eb0 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	3328      	adds	r3, #40	; 0x28
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	705a      	strb	r2, [r3, #1]
 8000eae:	e00b      	b.n	8000ec8 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000ed4:	883a      	ldrh	r2, [r7, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	78ba      	ldrb	r2, [r7, #2]
 8000ede:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ef2:	78bb      	ldrb	r3, [r7, #2]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d102      	bne.n	8000efe <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_PCD_EP_Open+0x9a>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e00e      	b.n	8000f2a <HAL_PCD_EP_Open+0xb8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68f9      	ldr	r1, [r7, #12]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f950 	bl	80021c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000f28:	7afb      	ldrb	r3, [r7, #11]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da0b      	bge.n	8000f5e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	3328      	adds	r3, #40	; 0x28
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	705a      	strb	r2, [r3, #1]
 8000f5c:	e00b      	b.n	8000f76 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_PCD_EP_Close+0x5e>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e00e      	b.n	8000fae <HAL_PCD_EP_Close+0x7c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68f9      	ldr	r1, [r7, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fbfc 	bl	800279c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	015b      	lsls	r3, r3, #5
 8000fce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2200      	movs	r2, #0
 8000fee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6979      	ldr	r1, [r7, #20]
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fd5b 	bl	8002ac8 <USB_EPStartXfer>
 8001012:	e005      	b.n	8001020 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6979      	ldr	r1, [r7, #20]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fd54 	bl	8002ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	3328      	adds	r3, #40	; 0x28
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2201      	movs	r2, #1
 8001060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	b2da      	uxtb	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800106e:	7afb      	ldrb	r3, [r7, #11]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6979      	ldr	r1, [r7, #20]
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fd22 	bl	8002ac8 <USB_EPStartXfer>
 8001084:	e005      	b.n	8001092 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6979      	ldr	r1, [r7, #20]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fd1b 	bl	8002ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 0207 	and.w	r2, r3, #7
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d901      	bls.n	80010ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e046      	b.n	8001148 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da0b      	bge.n	80010da <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	3328      	adds	r3, #40	; 0x28
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2201      	movs	r2, #1
 80010d6:	705a      	strb	r2, [r3, #1]
 80010d8:	e009      	b.n	80010ee <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2201      	movs	r2, #1
 80010f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_PCD_EP_SetStall+0x72>
 800110a:	2302      	movs	r3, #2
 800110c:	e01c      	b.n	8001148 <HAL_PCD_EP_SetStall+0xac>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f001 ff8b 	bl	8003038 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	2b00      	cmp	r3, #0
 800112a:	d108      	bne.n	800113e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f002 f889 	bl	8003250 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f003 020f 	and.w	r2, r3, #15
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d901      	bls.n	800116e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e03a      	b.n	80011e4 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800116e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da0b      	bge.n	800118e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	015b      	lsls	r3, r3, #5
 800117e:	3328      	adds	r3, #40	; 0x28
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	705a      	strb	r2, [r3, #1]
 800118c:	e00b      	b.n	80011a6 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_PCD_EP_ClrStall+0x76>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e00e      	b.n	80011e4 <HAL_PCD_EP_ClrStall+0x94>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 ff71 	bl	80030bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80011f4:	e282      	b.n	80016fc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001200:	8afb      	ldrh	r3, [r7, #22]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800120a:	7d7b      	ldrb	r3, [r7, #21]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 8142 	bne.w	8001496 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	d151      	bne.n	80012c0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800122c:	b29c      	uxth	r4, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800123a:	b29b      	uxth	r3, r3
 800123c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3328      	adds	r3, #40	; 0x28
 8001242:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800124c:	b29b      	uxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	3302      	adds	r3, #2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	4413      	add	r3, r2
 8001262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	441a      	add	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f003 fa57 	bl	8004734 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8234 	beq.w	80016fc <PCD_EP_ISR_Handler+0x510>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f040 822f 	bne.w	80016fc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b292      	uxth	r2, r2
 80012b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80012be:	e21d      	b.n	80016fc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012c6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d033      	beq.n	8001342 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	3306      	adds	r3, #6
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001318:	b29b      	uxth	r3, r3
 800131a:	f001 ffe8 	bl	80032ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29a      	uxth	r2, r3
 8001326:	f640 738f 	movw	r3, #3983	; 0xf8f
 800132a:	4013      	ands	r3, r2
 800132c:	b29c      	uxth	r4, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001336:	b292      	uxth	r2, r2
 8001338:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f003 f9d0 	bl	80046e0 <HAL_PCD_SetupStageCallback>
 8001340:	e1dc      	b.n	80016fc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f280 81d8 	bge.w	80016fc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001358:	4013      	ands	r3, r2
 800135a:	b29c      	uxth	r4, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001364:	b292      	uxth	r2, r2
 8001366:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001370:	b29b      	uxth	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	3306      	adds	r3, #6
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d019      	beq.n	80013d0 <PCD_EP_ISR_Handler+0x1e4>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6959      	ldr	r1, [r3, #20]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f001 ff9a 	bl	80032ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013c8:	2100      	movs	r1, #0
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f003 f99a 	bl	8004704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461c      	mov	r4, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013de:	b29b      	uxth	r3, r3
 80013e0:	441c      	add	r4, r3
 80013e2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80013e6:	461c      	mov	r4, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10e      	bne.n	800140e <PCD_EP_ISR_Handler+0x222>
 80013f0:	8823      	ldrh	r3, [r4, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	8023      	strh	r3, [r4, #0]
 80013fc:	8823      	ldrh	r3, [r4, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001408:	b29b      	uxth	r3, r3
 800140a:	8023      	strh	r3, [r4, #0]
 800140c:	e02d      	b.n	800146a <PCD_EP_ISR_Handler+0x27e>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b3e      	cmp	r3, #62	; 0x3e
 8001414:	d812      	bhi.n	800143c <PCD_EP_ISR_Handler+0x250>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <PCD_EP_ISR_Handler+0x244>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	3301      	adds	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b29b      	uxth	r3, r3
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	b29b      	uxth	r3, r3
 8001438:	8023      	strh	r3, [r4, #0]
 800143a:	e016      	b.n	800146a <PCD_EP_ISR_Handler+0x27e>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <PCD_EP_ISR_Handler+0x26a>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3b01      	subs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	b29b      	uxth	r3, r3
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	b29b      	uxth	r3, r3
 800145e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001466:	b29b      	uxth	r3, r3
 8001468:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800147a:	b29c      	uxth	r4, r3
 800147c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001480:	b29c      	uxth	r4, r3
 8001482:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001486:	b29c      	uxth	r4, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba2      	ldr	r3, [pc, #648]	; (8001718 <PCD_EP_ISR_Handler+0x52c>)
 800148e:	4323      	orrs	r3, r4
 8001490:	b29b      	uxth	r3, r3
 8001492:	8013      	strh	r3, [r2, #0]
 8001494:	e132      	b.n	80016fc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	7d7b      	ldrb	r3, [r7, #21]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f280 80d1 	bge.w	8001652 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014c4:	4013      	ands	r3, r2
 80014c6:	b29c      	uxth	r4, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	7d7b      	ldrb	r3, [r7, #21]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80014d8:	b292      	uxth	r2, r2
 80014da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80014dc:	7d7b      	ldrb	r3, [r7, #21]
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	7b1b      	ldrb	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d121      	bne.n	8001536 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	3306      	adds	r3, #6
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800151c:	8bfb      	ldrh	r3, [r7, #30]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d072      	beq.n	8001608 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6959      	ldr	r1, [r3, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	88da      	ldrh	r2, [r3, #6]
 800152e:	8bfb      	ldrh	r3, [r7, #30]
 8001530:	f001 fedd 	bl	80032ee <USB_ReadPMA>
 8001534:	e068      	b.n	8001608 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d021      	beq.n	8001594 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001558:	b29b      	uxth	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	3302      	adds	r3, #2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001578:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d02a      	beq.n	80015d6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6959      	ldr	r1, [r3, #20]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	891a      	ldrh	r2, [r3, #8]
 800158c:	8bfb      	ldrh	r3, [r7, #30]
 800158e:	f001 feae 	bl	80032ee <USB_ReadPMA>
 8001592:	e020      	b.n	80015d6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800159c:	b29b      	uxth	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	3306      	adds	r3, #6
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015bc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6959      	ldr	r1, [r3, #20]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	895a      	ldrh	r2, [r3, #10]
 80015d0:	8bfb      	ldrh	r3, [r7, #30]
 80015d2:	f001 fe8c 	bl	80032ee <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f0:	b29c      	uxth	r4, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	441a      	add	r2, r3
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <PCD_EP_ISR_Handler+0x530>)
 8001602:	4323      	orrs	r3, r4
 8001604:	b29b      	uxth	r3, r3
 8001606:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	441a      	add	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	8bfb      	ldrh	r3, [r7, #30]
 800161a:	441a      	add	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <PCD_EP_ISR_Handler+0x446>
 8001628:	8bfa      	ldrh	r2, [r7, #30]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	429a      	cmp	r2, r3
 8001630:	d206      	bcs.n	8001640 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f003 f863 	bl	8004704 <HAL_PCD_DataOutStageCallback>
 800163e:	e008      	b.n	8001652 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	7819      	ldrb	r1, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fcb2 	bl	8000fb6 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001652:	8a7b      	ldrh	r3, [r7, #18]
 8001654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	d04f      	beq.n	80016fc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800165c:	7d7b      	ldrb	r3, [r7, #21]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	3328      	adds	r3, #40	; 0x28
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	7d7b      	ldrb	r3, [r7, #21]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800167c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001680:	b29c      	uxth	r4, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	7d7b      	ldrb	r3, [r7, #21]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	441a      	add	r2, r3
 800168e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001696:	b29b      	uxth	r3, r3
 8001698:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3302      	adds	r3, #2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	441a      	add	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d106      	bne.n	80016ea <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f003 f826 	bl	8004734 <HAL_PCD_DataInStageCallback>
 80016e8:	e008      	b.n	80016fc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7819      	ldrb	r1, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fc97 	bl	800102a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001704:	b29b      	uxth	r3, r3
 8001706:	b21b      	sxth	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f6ff ad74 	blt.w	80011f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3724      	adds	r7, #36	; 0x24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}
 8001718:	ffff8080 	.word	0xffff8080
 800171c:	ffff80c0 	.word	0xffff80c0

08001720 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	817b      	strh	r3, [r7, #10]
 800172e:	4613      	mov	r3, r2
 8001730:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173e:	897b      	ldrh	r3, [r7, #10]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	3328      	adds	r3, #40	; 0x28
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e006      	b.n	800175e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800175e:	893b      	ldrh	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2200      	movs	r2, #0
 8001768:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	b29a      	uxth	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	80da      	strh	r2, [r3, #6]
 8001772:	e00b      	b.n	800178c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2201      	movs	r2, #1
 8001778:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b29a      	uxth	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	b29a      	uxth	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e26c      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8087 	beq.w	80018c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d00c      	beq.n	80017de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c4:	4b8f      	ldr	r3, [pc, #572]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d112      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5e>
 80017d0:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d10b      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017de:	4b89      	ldr	r3, [pc, #548]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x12c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d168      	bne.n	80018c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e246      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x76>
 8001800:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7f      	ldr	r2, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e02e      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x98>
 8001816:	4b7b      	ldr	r3, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7a      	ldr	r2, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a77      	ldr	r2, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xbc>
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a71      	ldr	r2, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6a      	ldr	r2, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7fe ff8a 	bl	800078c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7fe ff86 	bl	800078c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1fa      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xe4>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7fe ff76 	bl	800078c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7fe ff72 	bl	800078c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1e6      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x10c>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d063      	beq.n	800199a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d11c      	bne.n	8001924 <HAL_RCC_OscConfig+0x18c>
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d116      	bne.n	8001924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1ba      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4939      	ldr	r1, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	e03a      	b.n	800199a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7fe ff2b 	bl	800078c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7fe ff27 	bl	800078c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e19b      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4927      	ldr	r1, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7fe ff0a 	bl	800078c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197c:	f7fe ff06 	bl	800078c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e17a      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03a      	beq.n	8001a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7fe feea 	bl	800078c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7fe fee6 	bl	800078c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e15a      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 faa8 	bl	8001f30 <RCC_Delay>
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7fe fed0 	bl	800078c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ee:	e00f      	b.n	8001a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7fe fecc 	bl	800078c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d908      	bls.n	8001a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e140      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	42420000 	.word	0x42420000
 8001a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e9      	bne.n	80019f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a6 	beq.w	8001b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a93      	ldr	r2, [pc, #588]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b91      	ldr	r3, [pc, #580]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b8e      	ldr	r3, [pc, #568]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8a      	ldr	r2, [pc, #552]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7fe fe8d 	bl	800078c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7fe fe89 	bl	800078c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0fd      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x312>
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e02d      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x334>
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	e01c      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0x356>
 8001ad4:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a6c      	ldr	r2, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a69      	ldr	r2, [pc, #420]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001aee:	4b67      	ldr	r3, [pc, #412]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a66      	ldr	r2, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d015      	beq.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7fe fe3d 	bl	800078c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe fe39 	bl	800078c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0ab      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ee      	beq.n	8001b16 <HAL_RCC_OscConfig+0x37e>
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7fe fe27 	bl	800078c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7fe fe23 	bl	800078c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e095      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ee      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6a:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a47      	ldr	r2, [pc, #284]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8081 	beq.w	8001c82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d061      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d146      	bne.n	8001c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_OscConfig+0x4fc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fdf7 	bl	800078c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7fe fdf3 	bl	800078c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e067      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	492d      	ldr	r1, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a19      	ldr	r1, [r3, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	430b      	orrs	r3, r1
 8001bee:	4927      	ldr	r1, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x4fc>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7fe fdc7 	bl	800078c <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7fe fdc3 	bl	800078c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e037      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46a>
 8001c20:	e02f      	b.n	8001c82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_RCC_OscConfig+0x4fc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fdb0 	bl	800078c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fdac 	bl	800078c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e020      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x498>
 8001c4e:	e018      	b.n	8001c82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e013      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42420060 	.word	0x42420060

08001c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0d0      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4965      	ldr	r1, [pc, #404]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b8      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	494d      	ldr	r1, [pc, #308]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d040      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e07f      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e073      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06b      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4936      	ldr	r1, [pc, #216]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d88:	f7fe fd00 	bl	800078c <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7fe fcfc 	bl	800078c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e053      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d210      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	4922      	ldr	r1, [pc, #136]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e032      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4916      	ldr	r1, [pc, #88]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	490e      	ldr	r1, [pc, #56]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e26:	f000 f821 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <HAL_RCC_ClockConfig+0x1cc>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_RCC_ClockConfig+0x1d0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fc5e 	bl	8000708 <HAL_InitTick>

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004c10 	.word	0x08004c10
 8001e64:	20000020 	.word	0x20000020
 8001e68:	200000cc 	.word	0x200000cc

08001e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b490      	push	{r4, r7}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e74:	1d3c      	adds	r4, r7, #4
 8001e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x40>
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001eaa:	e02d      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eae:	623b      	str	r3, [r7, #32]
      break;
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	0c9b      	lsrs	r3, r3, #18
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ec4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0c5b      	lsrs	r3, r3, #17
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ede:	4413      	add	r3, r2
 8001ee0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ee4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eea:	fb02 f203 	mul.w	r2, r2, r3
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	e004      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	623b      	str	r3, [r7, #32]
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0a:	623b      	str	r3, [r7, #32]
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc90      	pop	{r4, r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	08004bbc 	.word	0x08004bbc
 8001f20:	08004bcc 	.word	0x08004bcc
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	003d0900 	.word	0x003d0900

08001f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <RCC_Delay+0x34>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <RCC_Delay+0x38>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0a5b      	lsrs	r3, r3, #9
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f4c:	bf00      	nop
  }
  while (Delay --);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e5a      	subs	r2, r3, #1
 8001f52:	60fa      	str	r2, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f9      	bne.n	8001f4c <RCC_Delay+0x1c>
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000020 	.word	0x20000020
 8001f68:	10624dd3 	.word	0x10624dd3

08001f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07d      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	61d3      	str	r3, [r2, #28]
 8001fa4:	4b49      	ldr	r3, [pc, #292]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a42      	ldr	r2, [pc, #264]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fbde 	bl	800078c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd4:	f7fe fbda 	bl	800078c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e06d      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d02e      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d027      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002018:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002020:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002026:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d014      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe fba9 	bl	800078c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fba5 	bl	800078c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e036      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ee      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206e:	4313      	orrs	r3, r2
 8002070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	490b      	ldr	r1, [pc, #44]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420440 	.word	0x42420440

080020d8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80020d8:	b084      	sub	sp, #16
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	f107 0014 	add.w	r0, r7, #20
 80020e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	b004      	add	sp, #16
 80020f6:	4770      	bx	lr

080020f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002100:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002104:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800210c:	b29a      	uxth	r2, r3
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	4313      	orrs	r3, r2
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800212e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002132:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800213a:	b29b      	uxth	r3, r3
 800213c:	b21a      	sxth	r2, r3
 800213e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002142:	43db      	mvns	r3, r3
 8002144:	b21b      	sxth	r3, r3
 8002146:	4013      	ands	r3, r2
 8002148:	b21b      	sxth	r3, r3
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002176:	b084      	sub	sp, #16
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	f107 0014 	add.w	r0, r7, #20
 8002184:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffa5 	bl	80020f8 <USB_EnableGlobalInt>

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ba:	b004      	add	sp, #16
 80021bc:	4770      	bx	lr
	...

080021c0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80021e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d819      	bhi.n	8002222 <USB_ActivateEndpoint+0x62>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <USB_ActivateEndpoint+0x34>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002205 	.word	0x08002205
 80021f8:	08002219 	.word	0x08002219
 80021fc:	08002229 	.word	0x08002229
 8002200:	0800220f 	.word	0x0800220f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002204:	89bb      	ldrh	r3, [r7, #12]
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	81bb      	strh	r3, [r7, #12]
      break;
 800220c:	e00d      	b.n	800222a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800220e:	89bb      	ldrh	r3, [r7, #12]
 8002210:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002214:	81bb      	strh	r3, [r7, #12]
      break;
 8002216:	e008      	b.n	800222a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	81bb      	strh	r3, [r7, #12]
      break;
 8002220:	e003      	b.n	800222a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      break;
 8002226:	e000      	b.n	800222a <USB_ActivateEndpoint+0x6a>
      break;
 8002228:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	89bb      	ldrh	r3, [r7, #12]
 8002236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002246:	b29b      	uxth	r3, r3
 8002248:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002260:	b29a      	uxth	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b29c      	uxth	r4, r3
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	4b8a      	ldr	r3, [pc, #552]	; (80024a0 <USB_ActivateEndpoint+0x2e0>)
 8002278:	4323      	orrs	r3, r4
 800227a:	b29b      	uxth	r3, r3
 800227c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8112 	bne.w	80024ac <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d067      	beq.n	8002360 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002290:	687c      	ldr	r4, [r7, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002298:	b29b      	uxth	r3, r3
 800229a:	441c      	add	r4, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	4423      	add	r3, r4
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	461c      	mov	r4, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	88db      	ldrh	r3, [r3, #6]
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29c      	uxth	r4, r3
 80022c6:	4623      	mov	r3, r4
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d014      	beq.n	80022fa <USB_ActivateEndpoint+0x13a>
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	b29c      	uxth	r4, r3
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <USB_ActivateEndpoint+0x2e4>)
 80022f4:	4323      	orrs	r3, r4
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d018      	beq.n	8002334 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002318:	b29c      	uxth	r4, r3
 800231a:	f084 0320 	eor.w	r3, r4, #32
 800231e:	b29c      	uxth	r4, r3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <USB_ActivateEndpoint+0x2e0>)
 800232c:	4323      	orrs	r3, r4
 800232e:	b29b      	uxth	r3, r3
 8002330:	8013      	strh	r3, [r2, #0]
 8002332:	e22b      	b.n	800278c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800234a:	b29c      	uxth	r4, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <USB_ActivateEndpoint+0x2e0>)
 8002358:	4323      	orrs	r3, r4
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]
 800235e:	e215      	b.n	800278c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002360:	687c      	ldr	r4, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	441c      	add	r4, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4423      	add	r3, r4
 8002374:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002378:	461c      	mov	r4, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	88db      	ldrh	r3, [r3, #6]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002388:	687c      	ldr	r4, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	441c      	add	r4, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4423      	add	r3, r4
 800239c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023a0:	461c      	mov	r4, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <USB_ActivateEndpoint+0x208>
 80023aa:	8823      	ldrh	r3, [r4, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	8023      	strh	r3, [r4, #0]
 80023b6:	8823      	ldrh	r3, [r4, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8023      	strh	r3, [r4, #0]
 80023c6:	e02d      	b.n	8002424 <USB_ActivateEndpoint+0x264>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b3e      	cmp	r3, #62	; 0x3e
 80023ce:	d812      	bhi.n	80023f6 <USB_ActivateEndpoint+0x236>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <USB_ActivateEndpoint+0x22a>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8023      	strh	r3, [r4, #0]
 80023f4:	e016      	b.n	8002424 <USB_ActivateEndpoint+0x264>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <USB_ActivateEndpoint+0x250>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	b29b      	uxth	r3, r3
 8002414:	029b      	lsls	r3, r3, #10
 8002416:	b29b      	uxth	r3, r3
 8002418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002420:	b29b      	uxth	r3, r3
 8002422:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29c      	uxth	r4, r3
 8002432:	4623      	mov	r3, r4
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <USB_ActivateEndpoint+0x2a6>
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	b29c      	uxth	r4, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <USB_ActivateEndpoint+0x2e8>)
 8002460:	4323      	orrs	r3, r4
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	b29c      	uxth	r4, r3
 800247e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002482:	b29c      	uxth	r4, r3
 8002484:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002488:	b29c      	uxth	r4, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <USB_ActivateEndpoint+0x2e0>)
 8002496:	4323      	orrs	r3, r4
 8002498:	b29b      	uxth	r3, r3
 800249a:	8013      	strh	r3, [r2, #0]
 800249c:	e176      	b.n	800278c <USB_ActivateEndpoint+0x5cc>
 800249e:	bf00      	nop
 80024a0:	ffff8080 	.word	0xffff8080
 80024a4:	ffff80c0 	.word	0xffff80c0
 80024a8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	b29c      	uxth	r4, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	4b96      	ldr	r3, [pc, #600]	; (8002728 <USB_ActivateEndpoint+0x568>)
 80024d0:	4323      	orrs	r3, r4
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80024d6:	687c      	ldr	r4, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	441c      	add	r4, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4423      	add	r3, r4
 80024ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ee:	461c      	mov	r4, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	891b      	ldrh	r3, [r3, #8]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	8023      	strh	r3, [r4, #0]
 80024fe:	687c      	ldr	r4, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	441c      	add	r4, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4423      	add	r3, r4
 8002512:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002516:	461c      	mov	r4, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	895b      	ldrh	r3, [r3, #10]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 8088 	bne.w	8002640 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29c      	uxth	r4, r3
 800253e:	4623      	mov	r3, r4
 8002540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d014      	beq.n	8002572 <USB_ActivateEndpoint+0x3b2>
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	b29c      	uxth	r4, r3
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	441a      	add	r2, r3
 800256a:	4b70      	ldr	r3, [pc, #448]	; (800272c <USB_ActivateEndpoint+0x56c>)
 800256c:	4323      	orrs	r3, r4
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29c      	uxth	r4, r3
 8002580:	4623      	mov	r3, r4
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <USB_ActivateEndpoint+0x3f4>
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	b29c      	uxth	r4, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	4b60      	ldr	r3, [pc, #384]	; (8002730 <USB_ActivateEndpoint+0x570>)
 80025ae:	4323      	orrs	r3, r4
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	b29c      	uxth	r4, r3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	441a      	add	r2, r3
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <USB_ActivateEndpoint+0x570>)
 80025d8:	4323      	orrs	r3, r4
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f4:	b29c      	uxth	r4, r3
 80025f6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80025fa:	b29c      	uxth	r4, r3
 80025fc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002600:	b29c      	uxth	r4, r3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <USB_ActivateEndpoint+0x574>)
 800260e:	4323      	orrs	r3, r4
 8002610:	b29b      	uxth	r3, r3
 8002612:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800262a:	b29c      	uxth	r4, r3
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <USB_ActivateEndpoint+0x574>)
 8002638:	4323      	orrs	r3, r4
 800263a:	b29b      	uxth	r3, r3
 800263c:	8013      	strh	r3, [r2, #0]
 800263e:	e0a5      	b.n	800278c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29c      	uxth	r4, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <USB_ActivateEndpoint+0x4c2>
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	b29c      	uxth	r4, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <USB_ActivateEndpoint+0x56c>)
 800267c:	4323      	orrs	r3, r4
 800267e:	b29b      	uxth	r3, r3
 8002680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29c      	uxth	r4, r3
 8002690:	4623      	mov	r3, r4
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d014      	beq.n	80026c4 <USB_ActivateEndpoint+0x504>
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b0:	b29c      	uxth	r4, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <USB_ActivateEndpoint+0x570>)
 80026be:	4323      	orrs	r3, r4
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	b29c      	uxth	r4, r3
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <USB_ActivateEndpoint+0x56c>)
 80026e8:	4323      	orrs	r3, r4
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	78db      	ldrb	r3, [r3, #3]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d020      	beq.n	8002738 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	b29c      	uxth	r4, r3
 800270e:	f084 0320 	eor.w	r3, r4, #32
 8002712:	b29c      	uxth	r4, r3
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	441a      	add	r2, r3
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <USB_ActivateEndpoint+0x574>)
 8002720:	4323      	orrs	r3, r4
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
 8002726:	e01c      	b.n	8002762 <USB_ActivateEndpoint+0x5a2>
 8002728:	ffff8180 	.word	0xffff8180
 800272c:	ffffc080 	.word	0xffffc080
 8002730:	ffff80c0 	.word	0xffff80c0
 8002734:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	b29c      	uxth	r4, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <USB_ActivateEndpoint+0x5d8>)
 800275c:	4323      	orrs	r3, r4
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	b29c      	uxth	r4, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <USB_ActivateEndpoint+0x5d8>)
 8002786:	4323      	orrs	r3, r4
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bc90      	pop	{r4, r7}
 8002796:	4770      	bx	lr
 8002798:	ffff8080 	.word	0xffff8080

0800279c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800279c:	b490      	push	{r4, r7}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	7b1b      	ldrb	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d171      	bne.n	8002892 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29c      	uxth	r4, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d014      	beq.n	80027f8 <USB_DeactivateEndpoint+0x5c>
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	b29c      	uxth	r4, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <USB_DeactivateEndpoint+0x204>)
 80027f2:	4323      	orrs	r3, r4
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280e:	b29c      	uxth	r4, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <USB_DeactivateEndpoint+0x208>)
 800281c:	4323      	orrs	r3, r4
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]
 8002822:	e144      	b.n	8002aae <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29c      	uxth	r4, r3
 8002832:	4623      	mov	r3, r4
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <USB_DeactivateEndpoint+0xca>
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	b29c      	uxth	r4, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <USB_DeactivateEndpoint+0x20c>)
 8002860:	4323      	orrs	r3, r4
 8002862:	b29b      	uxth	r3, r3
 8002864:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287c:	b29c      	uxth	r4, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	441a      	add	r2, r3
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <USB_DeactivateEndpoint+0x208>)
 800288a:	4323      	orrs	r3, r4
 800288c:	b29b      	uxth	r3, r3
 800288e:	8013      	strh	r3, [r2, #0]
 8002890:	e10d      	b.n	8002aae <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 8088 	bne.w	80029ac <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29c      	uxth	r4, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <USB_DeactivateEndpoint+0x142>
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	b29c      	uxth	r4, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <USB_DeactivateEndpoint+0x20c>)
 80028d8:	4323      	orrs	r3, r4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29c      	uxth	r4, r3
 80028ec:	4623      	mov	r3, r4
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <USB_DeactivateEndpoint+0x184>
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290c:	b29c      	uxth	r4, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <USB_DeactivateEndpoint+0x204>)
 800291a:	4323      	orrs	r3, r4
 800291c:	b29b      	uxth	r3, r3
 800291e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	b29c      	uxth	r4, r3
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <USB_DeactivateEndpoint+0x204>)
 8002944:	4323      	orrs	r3, r4
 8002946:	b29b      	uxth	r3, r3
 8002948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	b29c      	uxth	r4, r3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <USB_DeactivateEndpoint+0x208>)
 800296e:	4323      	orrs	r3, r4
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298a:	b29c      	uxth	r4, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <USB_DeactivateEndpoint+0x208>)
 8002998:	4323      	orrs	r3, r4
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]
 800299e:	e086      	b.n	8002aae <USB_DeactivateEndpoint+0x312>
 80029a0:	ffff80c0 	.word	0xffff80c0
 80029a4:	ffff8080 	.word	0xffff8080
 80029a8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29c      	uxth	r4, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d014      	beq.n	80029ee <USB_DeactivateEndpoint+0x252>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	b29c      	uxth	r4, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	4b35      	ldr	r3, [pc, #212]	; (8002abc <USB_DeactivateEndpoint+0x320>)
 80029e8:	4323      	orrs	r3, r4
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29c      	uxth	r4, r3
 80029fc:	4623      	mov	r3, r4
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <USB_DeactivateEndpoint+0x294>
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	b29c      	uxth	r4, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <USB_DeactivateEndpoint+0x324>)
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	b29c      	uxth	r4, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <USB_DeactivateEndpoint+0x320>)
 8002a54:	4323      	orrs	r3, r4
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a70:	b29c      	uxth	r4, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <USB_DeactivateEndpoint+0x328>)
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	b29c      	uxth	r4, r3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <USB_DeactivateEndpoint+0x328>)
 8002aa8:	4323      	orrs	r3, r4
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc90      	pop	{r4, r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	ffffc080 	.word	0xffffc080
 8002ac0:	ffff80c0 	.word	0xffff80c0
 8002ac4:	ffff8080 	.word	0xffff8080

08002ac8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b08d      	sub	sp, #52	; 0x34
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 8160 	bne.w	8002d9c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d909      	bls.n	8002afc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	619a      	str	r2, [r3, #24]
 8002afa:	e005      	b.n	8002b08 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6959      	ldr	r1, [r3, #20]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	88da      	ldrh	r2, [r3, #6]
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fba2 	bl	8003266 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002b22:	687c      	ldr	r4, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	441c      	add	r4, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4423      	add	r3, r4
 8002b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3a:	461c      	mov	r4, r3
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8023      	strh	r3, [r4, #0]
 8002b42:	e10f      	b.n	8002d64 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d065      	beq.n	8002c26 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b5a:	687c      	ldr	r4, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d148      	bne.n	8002bf6 <USB_EPStartXfer+0x12e>
 8002b64:	687c      	ldr	r4, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	441c      	add	r4, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4423      	add	r3, r4
 8002b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b7c:	461c      	mov	r4, r3
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10e      	bne.n	8002ba2 <USB_EPStartXfer+0xda>
 8002b84:	8823      	ldrh	r3, [r4, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8023      	strh	r3, [r4, #0]
 8002b90:	8823      	ldrh	r3, [r4, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	8023      	strh	r3, [r4, #0]
 8002ba0:	e03d      	b.n	8002c1e <USB_EPStartXfer+0x156>
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba6:	d810      	bhi.n	8002bca <USB_EPStartXfer+0x102>
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <USB_EPStartXfer+0xf6>
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	3301      	adds	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	8023      	strh	r3, [r4, #0]
 8002bc8:	e029      	b.n	8002c1e <USB_EPStartXfer+0x156>
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <USB_EPStartXfer+0x118>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8023      	strh	r3, [r4, #0]
 8002bf4:	e013      	b.n	8002c1e <USB_EPStartXfer+0x156>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10f      	bne.n	8002c1e <USB_EPStartXfer+0x156>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	441c      	add	r4, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4423      	add	r3, r4
 8002c10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	895b      	ldrh	r3, [r3, #10]
 8002c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c24:	e063      	b.n	8002cee <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d148      	bne.n	8002cc0 <USB_EPStartXfer+0x1f8>
 8002c2e:	687c      	ldr	r4, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	441c      	add	r4, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	4423      	add	r3, r4
 8002c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c46:	461c      	mov	r4, r3
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10e      	bne.n	8002c6c <USB_EPStartXfer+0x1a4>
 8002c4e:	8823      	ldrh	r3, [r4, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8023      	strh	r3, [r4, #0]
 8002c5a:	8823      	ldrh	r3, [r4, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8023      	strh	r3, [r4, #0]
 8002c6a:	e03d      	b.n	8002ce8 <USB_EPStartXfer+0x220>
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c70:	d810      	bhi.n	8002c94 <USB_EPStartXfer+0x1cc>
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <USB_EPStartXfer+0x1c0>
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	3301      	adds	r3, #1
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8023      	strh	r3, [r4, #0]
 8002c92:	e029      	b.n	8002ce8 <USB_EPStartXfer+0x220>
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <USB_EPStartXfer+0x1e2>
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8023      	strh	r3, [r4, #0]
 8002cbe:	e013      	b.n	8002ce8 <USB_EPStartXfer+0x220>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10f      	bne.n	8002ce8 <USB_EPStartXfer+0x220>
 8002cc8:	687c      	ldr	r4, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	441c      	add	r4, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4423      	add	r3, r4
 8002cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ce0:	461c      	mov	r4, r3
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	891b      	ldrh	r3, [r3, #8]
 8002cec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6959      	ldr	r1, [r3, #20]
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fab4 	bl	8003266 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d115      	bne.n	8002d32 <USB_EPStartXfer+0x26a>
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1c:	b29c      	uxth	r4, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	4b9a      	ldr	r3, [pc, #616]	; (8002f94 <USB_EPStartXfer+0x4cc>)
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8013      	strh	r3, [r2, #0]
 8002d30:	e018      	b.n	8002d64 <USB_EPStartXfer+0x29c>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d114      	bne.n	8002d64 <USB_EPStartXfer+0x29c>
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d50:	b29c      	uxth	r4, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	441a      	add	r2, r3
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <USB_EPStartXfer+0x4d0>)
 8002d5e:	4323      	orrs	r3, r4
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	f084 0310 	eor.w	r3, r4, #16
 8002d80:	b29c      	uxth	r4, r3
 8002d82:	f084 0320 	eor.w	r3, r4, #32
 8002d86:	b29c      	uxth	r4, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <USB_EPStartXfer+0x4d4>)
 8002d94:	4323      	orrs	r3, r4
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]
 8002d9a:	e146      	b.n	800302a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d909      	bls.n	8002dbc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	619a      	str	r2, [r3, #24]
 8002dba:	e005      	b.n	8002dc8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7b1b      	ldrb	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d148      	bne.n	8002e62 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002dd0:	687c      	ldr	r4, [r7, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	441c      	add	r4, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4423      	add	r3, r4
 8002de4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002de8:	461c      	mov	r4, r3
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10e      	bne.n	8002e0e <USB_EPStartXfer+0x346>
 8002df0:	8823      	ldrh	r3, [r4, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	8023      	strh	r3, [r4, #0]
 8002dfc:	8823      	ldrh	r3, [r4, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8023      	strh	r3, [r4, #0]
 8002e0c:	e0f2      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	2b3e      	cmp	r3, #62	; 0x3e
 8002e12:	d810      	bhi.n	8002e36 <USB_EPStartXfer+0x36e>
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <USB_EPStartXfer+0x362>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	3301      	adds	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	8023      	strh	r3, [r4, #0]
 8002e34:	e0de      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <USB_EPStartXfer+0x384>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	029b      	lsls	r3, r3, #10
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8023      	strh	r3, [r4, #0]
 8002e60:	e0c8      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d148      	bne.n	8002efc <USB_EPStartXfer+0x434>
 8002e6a:	687c      	ldr	r4, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	441c      	add	r4, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	4423      	add	r3, r4
 8002e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e82:	461c      	mov	r4, r3
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <USB_EPStartXfer+0x3e0>
 8002e8a:	8823      	ldrh	r3, [r4, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8023      	strh	r3, [r4, #0]
 8002e96:	8823      	ldrh	r3, [r4, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8023      	strh	r3, [r4, #0]
 8002ea6:	e03d      	b.n	8002f24 <USB_EPStartXfer+0x45c>
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8002eac:	d810      	bhi.n	8002ed0 <USB_EPStartXfer+0x408>
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <USB_EPStartXfer+0x3fc>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8023      	strh	r3, [r4, #0]
 8002ece:	e029      	b.n	8002f24 <USB_EPStartXfer+0x45c>
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <USB_EPStartXfer+0x41e>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8023      	strh	r3, [r4, #0]
 8002efa:	e013      	b.n	8002f24 <USB_EPStartXfer+0x45c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10f      	bne.n	8002f24 <USB_EPStartXfer+0x45c>
 8002f04:	687c      	ldr	r4, [r7, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	441c      	add	r4, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4423      	add	r3, r4
 8002f18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	8023      	strh	r3, [r4, #0]
 8002f24:	687c      	ldr	r4, [r7, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d14e      	bne.n	8002fcc <USB_EPStartXfer+0x504>
 8002f2e:	687c      	ldr	r4, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	441c      	add	r4, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4423      	add	r3, r4
 8002f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f46:	461c      	mov	r4, r3
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <USB_EPStartXfer+0x4a4>
 8002f4e:	8823      	ldrh	r3, [r4, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8023      	strh	r3, [r4, #0]
 8002f5a:	8823      	ldrh	r3, [r4, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8023      	strh	r3, [r4, #0]
 8002f6a:	e043      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f70:	d816      	bhi.n	8002fa0 <USB_EPStartXfer+0x4d8>
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <USB_EPStartXfer+0x4c0>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8023      	strh	r3, [r4, #0]
 8002f92:	e02f      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002f94:	ffff80c0 	.word	0xffff80c0
 8002f98:	ffffc080 	.word	0xffffc080
 8002f9c:	ffff8080 	.word	0xffff8080
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <USB_EPStartXfer+0x4ee>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8023      	strh	r3, [r4, #0]
 8002fca:	e013      	b.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10f      	bne.n	8002ff4 <USB_EPStartXfer+0x52c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	441c      	add	r4, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4423      	add	r3, r4
 8002fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	b29c      	uxth	r4, r3
 800300c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003010:	b29c      	uxth	r4, r3
 8003012:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003016:	b29c      	uxth	r4, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <USB_EPStartXfer+0x56c>)
 8003024:	4323      	orrs	r3, r4
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3734      	adds	r7, #52	; 0x34
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	ffff8080 	.word	0xffff8080

08003038 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003038:	b490      	push	{r4, r7}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003060:	b29c      	uxth	r4, r3
 8003062:	f084 0310 	eor.w	r3, r4, #16
 8003066:	b29c      	uxth	r4, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <USB_EPSetStall+0x80>)
 8003074:	4323      	orrs	r3, r4
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
 800307a:	e017      	b.n	80030ac <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	b29c      	uxth	r4, r3
 8003094:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003098:	b29c      	uxth	r4, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <USB_EPSetStall+0x80>)
 80030a6:	4323      	orrs	r3, r4
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc90      	pop	{r4, r7}
 80030b6:	4770      	bx	lr
 80030b8:	ffff8080 	.word	0xffff8080

080030bc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030bc:	b490      	push	{r4, r7}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	7b1b      	ldrb	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d17d      	bne.n	80031ca <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03d      	beq.n	8003152 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29c      	uxth	r4, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d014      	beq.n	8003118 <USB_EPClearStall+0x5c>
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	b29c      	uxth	r4, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <USB_EPClearStall+0x11c>)
 8003112:	4323      	orrs	r3, r4
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d054      	beq.n	80031ca <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003136:	b29c      	uxth	r4, r3
 8003138:	f084 0320 	eor.w	r3, r4, #32
 800313c:	b29c      	uxth	r4, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <USB_EPClearStall+0x120>)
 800314a:	4323      	orrs	r3, r4
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
 8003150:	e03b      	b.n	80031ca <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29c      	uxth	r4, r3
 8003160:	4623      	mov	r3, r4
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <USB_EPClearStall+0xd8>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003180:	b29c      	uxth	r4, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	441a      	add	r2, r3
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <USB_EPClearStall+0x124>)
 800318e:	4323      	orrs	r3, r4
 8003190:	b29b      	uxth	r3, r3
 8003192:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	b29c      	uxth	r4, r3
 80031ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031b0:	b29c      	uxth	r4, r3
 80031b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <USB_EPClearStall+0x120>)
 80031c4:	4323      	orrs	r3, r4
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc90      	pop	{r4, r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	ffff80c0 	.word	0xffff80c0
 80031dc:	ffff8080 	.word	0xffff8080
 80031e0:	ffffc080 	.word	0xffffc080

080031e4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003240:	b29b      	uxth	r3, r3
 8003242:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003266:	b480      	push	{r7}
 8003268:	b08d      	sub	sp, #52	; 0x34
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	4611      	mov	r1, r2
 8003272:	461a      	mov	r2, r3
 8003274:	460b      	mov	r3, r1
 8003276:	80fb      	strh	r3, [r7, #6]
 8003278:	4613      	mov	r3, r2
 800327a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800327c:	88bb      	ldrh	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	005a      	lsls	r2, r3, #1
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329e:	e01e      	b.n	80032de <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	3301      	adds	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	3302      	adds	r3, #2
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	3302      	adds	r3, #2
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	3b01      	subs	r3, #1
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1dd      	bne.n	80032a0 <USB_WritePMA+0x3a>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3734      	adds	r7, #52	; 0x34
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b08b      	sub	sp, #44	; 0x2c
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	4611      	mov	r1, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	460b      	mov	r3, r1
 80032fe:	80fb      	strh	r3, [r7, #6]
 8003300:	4613      	mov	r3, r2
 8003302:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003304:	88bb      	ldrh	r3, [r7, #4]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	b29b      	uxth	r3, r3
 800330a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	005a      	lsls	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003320:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	e01b      	b.n	8003360 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	3302      	adds	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3301      	adds	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b2da      	uxtb	r2, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3301      	adds	r3, #1
 8003352:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	3302      	adds	r3, #2
 8003358:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	3b01      	subs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e0      	bne.n	8003328 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003366:	88bb      	ldrh	r3, [r7, #4]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	701a      	strb	r2, [r3, #0]
  }
}
 8003382:	bf00      	nop
 8003384:	372c      	adds	r7, #44	; 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80033a0:	2302      	movs	r3, #2
 80033a2:	e01a      	b.n	80033da <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 fa1a 	bl	800480c <USBD_LL_Init>

  return USBD_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e001      	b.n	8003408 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003404:	2302      	movs	r3, #2
 8003406:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f001 fa35 	bl	800488c <USBD_LL_Start>

  return USBD_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800344c:	2302      	movs	r3, #2
 800344e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4611      	mov	r1, r2
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	4611      	mov	r1, r2
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3

  return USBD_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 feca 	bl	8004250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d00c      	beq.n	80034fa <USBD_LL_SetupStage+0x56>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d302      	bcc.n	80034ea <USBD_LL_SetupStage+0x46>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d010      	beq.n	800350a <USBD_LL_SetupStage+0x66>
 80034e8:	e017      	b.n	800351a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f9ca 	bl	800388c <USBD_StdDevReq>
      break;
 80034f8:	e01a      	b.n	8003530 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa2c 	bl	8003960 <USBD_StdItfReq>
      break;
 8003508:	e012      	b.n	8003530 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa6a 	bl	80039ec <USBD_StdEPReq>
      break;
 8003518:	e00a      	b.n	8003530 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 fa0f 	bl	800494c <USBD_LL_StallEP>
      break;
 800352e:	bf00      	nop
  }

  return USBD_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	460b      	mov	r3, r1
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003548:	7afb      	ldrb	r3, [r7, #11]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d14b      	bne.n	80035e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003554:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800355c:	2b03      	cmp	r3, #3
 800355e:	d134      	bne.n	80035ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d919      	bls.n	80035a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003582:	429a      	cmp	r2, r3
 8003584:	d203      	bcs.n	800358e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800358a:	b29b      	uxth	r3, r3
 800358c:	e002      	b.n	8003594 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003592:	b29b      	uxth	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 ff2d 	bl	80043f8 <USBD_CtlContinueRx>
 800359e:	e038      	b.n	8003612 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d105      	bne.n	80035c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 ff2a 	bl	800441c <USBD_CtlSendStatus>
 80035c8:	e023      	b.n	8003612 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d11e      	bne.n	8003612 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80035dc:	2100      	movs	r1, #0
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f001 f9b4 	bl	800494c <USBD_LL_StallEP>
 80035e4:	e015      	b.n	8003612 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d108      	bne.n	800360e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	7afa      	ldrb	r2, [r7, #11]
 8003606:	4611      	mov	r1, r2
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	4798      	blx	r3
 800360c:	e001      	b.n	8003612 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800360e:	2302      	movs	r3, #2
 8003610:	e000      	b.n	8003614 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	460b      	mov	r3, r1
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d17f      	bne.n	8003730 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3314      	adds	r3, #20
 8003634:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800363c:	2b02      	cmp	r3, #2
 800363e:	d15c      	bne.n	80036fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d915      	bls.n	8003678 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	1ad2      	subs	r2, r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 feb5 	bl	80043d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800366a:	2300      	movs	r3, #0
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f001 fa10 	bl	8004a96 <USBD_LL_PrepareReceive>
 8003676:	e04e      	b.n	8003716 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	6912      	ldr	r2, [r2, #16]
 8003680:	fbb3 f1f2 	udiv	r1, r3, r2
 8003684:	fb02 f201 	mul.w	r2, r2, r1
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11c      	bne.n	80036c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003696:	429a      	cmp	r2, r3
 8003698:	d316      	bcc.n	80036c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d20f      	bcs.n	80036c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fe91 	bl	80043d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80036ba:	2300      	movs	r3, #0
 80036bc:	2200      	movs	r2, #0
 80036be:	2100      	movs	r1, #0
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f001 f9e8 	bl	8004a96 <USBD_LL_PrepareReceive>
 80036c6:	e026      	b.n	8003716 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d105      	bne.n	80036ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f001 f92d 	bl	800494c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fea5 	bl	8004442 <USBD_CtlReceiveStatus>
 80036f8:	e00d      	b.n	8003716 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003700:	2b04      	cmp	r3, #4
 8003702:	d004      	beq.n	800370e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f001 f91b 	bl	800494c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d11d      	bne.n	800375c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fe83 	bl	800342c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800372e:	e015      	b.n	800375c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003742:	2b03      	cmp	r3, #3
 8003744:	d108      	bne.n	8003758 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	7afa      	ldrb	r2, [r7, #11]
 8003750:	4611      	mov	r1, r2
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	4798      	blx	r3
 8003756:	e001      	b.n	800375c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003758:	2302      	movs	r3, #2
 800375a:	e000      	b.n	800375e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800376e:	2340      	movs	r3, #64	; 0x40
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f001 f8a4 	bl	80048c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800378a:	2340      	movs	r3, #64	; 0x40
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f001 f896 	bl	80048c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2240      	movs	r2, #64	; 0x40
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6852      	ldr	r2, [r2, #4]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	4611      	mov	r1, r2
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
  }

  return USBD_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2204      	movs	r2, #4
 800381e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800383c:	2b04      	cmp	r3, #4
 800383e:	d105      	bne.n	800384c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003866:	2b03      	cmp	r3, #3
 8003868:	d10b      	bne.n	8003882 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d004      	beq.n	80038b0 <USBD_StdDevReq+0x24>
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d002      	beq.n	80038b0 <USBD_StdDevReq+0x24>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <USBD_StdDevReq+0x34>
 80038ae:	e04c      	b.n	800394a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
      break;
 80038be:	e049      	b.n	8003954 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	d83a      	bhi.n	800393e <USBD_StdDevReq+0xb2>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <USBD_StdDevReq+0x44>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003921 	.word	0x08003921
 80038d4:	08003935 	.word	0x08003935
 80038d8:	0800393f 	.word	0x0800393f
 80038dc:	0800392b 	.word	0x0800392b
 80038e0:	0800393f 	.word	0x0800393f
 80038e4:	08003903 	.word	0x08003903
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800393f 	.word	0x0800393f
 80038f0:	08003917 	.word	0x08003917
 80038f4:	0800390d 	.word	0x0800390d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9d4 	bl	8003ca8 <USBD_GetDescriptor>
          break;
 8003900:	e022      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003902:	6839      	ldr	r1, [r7, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fb37 	bl	8003f78 <USBD_SetAddress>
          break;
 800390a:	e01d      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb74 	bl	8003ffc <USBD_SetConfig>
          break;
 8003914:	e018      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fbfd 	bl	8004118 <USBD_GetConfig>
          break;
 800391e:	e013      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fc2c 	bl	8004180 <USBD_GetStatus>
          break;
 8003928:	e00e      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fc5a 	bl	80041e6 <USBD_SetFeature>
          break;
 8003932:	e009      	b.n	8003948 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fc69 	bl	800420e <USBD_ClrFeature>
          break;
 800393c:	e004      	b.n	8003948 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fcc1 	bl	80042c8 <USBD_CtlError>
          break;
 8003946:	bf00      	nop
      }
      break;
 8003948:	e004      	b.n	8003954 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fcbb 	bl	80042c8 <USBD_CtlError>
      break;
 8003952:	bf00      	nop
  }

  return ret;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003976:	2b20      	cmp	r3, #32
 8003978:	d003      	beq.n	8003982 <USBD_StdItfReq+0x22>
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d001      	beq.n	8003982 <USBD_StdItfReq+0x22>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d12a      	bne.n	80039d8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003988:	3b01      	subs	r3, #1
 800398a:	2b02      	cmp	r3, #2
 800398c:	d81d      	bhi.n	80039ca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	889b      	ldrh	r3, [r3, #4]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d813      	bhi.n	80039c0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	88db      	ldrh	r3, [r3, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d110      	bne.n	80039d4 <USBD_StdItfReq+0x74>
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fd2f 	bl	800441c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80039be:	e009      	b.n	80039d4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fc80 	bl	80042c8 <USBD_CtlError>
          break;
 80039c8:	e004      	b.n	80039d4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80039ca:	6839      	ldr	r1, [r7, #0]
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fc7b 	bl	80042c8 <USBD_CtlError>
          break;
 80039d2:	e000      	b.n	80039d6 <USBD_StdItfReq+0x76>
          break;
 80039d4:	bf00      	nop
      }
      break;
 80039d6:	e004      	b.n	80039e2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fc74 	bl	80042c8 <USBD_CtlError>
      break;
 80039e0:	bf00      	nop
  }

  return USBD_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d004      	beq.n	8003a16 <USBD_StdEPReq+0x2a>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d002      	beq.n	8003a16 <USBD_StdEPReq+0x2a>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <USBD_StdEPReq+0x3a>
 8003a14:	e13d      	b.n	8003c92 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
      break;
 8003a24:	e13a      	b.n	8003c9c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d10a      	bne.n	8003a48 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	6839      	ldr	r1, [r7, #0]
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	e12a      	b.n	8003c9e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d03e      	beq.n	8003ace <USBD_StdEPReq+0xe2>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d002      	beq.n	8003a5a <USBD_StdEPReq+0x6e>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d070      	beq.n	8003b3a <USBD_StdEPReq+0x14e>
 8003a58:	e115      	b.n	8003c86 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d002      	beq.n	8003a6a <USBD_StdEPReq+0x7e>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d015      	beq.n	8003a94 <USBD_StdEPReq+0xa8>
 8003a68:	e02b      	b.n	8003ac2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a6a:	7bbb      	ldrb	r3, [r7, #14]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00c      	beq.n	8003a8a <USBD_StdEPReq+0x9e>
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d009      	beq.n	8003a8a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 ff66 	bl	800494c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 ff62 	bl	800494c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003a88:	e020      	b.n	8003acc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8003a8a:	6839      	ldr	r1, [r7, #0]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fc1b 	bl	80042c8 <USBD_CtlError>
              break;
 8003a92:	e01b      	b.n	8003acc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	885b      	ldrh	r3, [r3, #2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10e      	bne.n	8003aba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <USBD_StdEPReq+0xce>
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d008      	beq.n	8003aba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	88db      	ldrh	r3, [r3, #6]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 ff49 	bl	800494c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fcae 	bl	800441c <USBD_CtlSendStatus>

              break;
 8003ac0:	e004      	b.n	8003acc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fbff 	bl	80042c8 <USBD_CtlError>
              break;
 8003aca:	bf00      	nop
          }
          break;
 8003acc:	e0e0      	b.n	8003c90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d002      	beq.n	8003ade <USBD_StdEPReq+0xf2>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d015      	beq.n	8003b08 <USBD_StdEPReq+0x11c>
 8003adc:	e026      	b.n	8003b2c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <USBD_StdEPReq+0x112>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d009      	beq.n	8003afe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 ff2c 	bl	800494c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 ff28 	bl	800494c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003afc:	e01c      	b.n	8003b38 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fbe1 	bl	80042c8 <USBD_CtlError>
              break;
 8003b06:	e017      	b.n	8003b38 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	885b      	ldrh	r3, [r3, #2]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d112      	bne.n	8003b36 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003b10:	7bbb      	ldrb	r3, [r7, #14]
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003b1a:	7bbb      	ldrb	r3, [r7, #14]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 ff33 	bl	800498a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fc79 	bl	800441c <USBD_CtlSendStatus>
              }
              break;
 8003b2a:	e004      	b.n	8003b36 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fbca 	bl	80042c8 <USBD_CtlError>
              break;
 8003b34:	e000      	b.n	8003b38 <USBD_StdEPReq+0x14c>
              break;
 8003b36:	bf00      	nop
          }
          break;
 8003b38:	e0aa      	b.n	8003c90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d002      	beq.n	8003b4a <USBD_StdEPReq+0x15e>
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d032      	beq.n	8003bae <USBD_StdEPReq+0x1c2>
 8003b48:	e097      	b.n	8003c7a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <USBD_StdEPReq+0x174>
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d004      	beq.n	8003b60 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fbb5 	bl	80042c8 <USBD_CtlError>
                break;
 8003b5e:	e091      	b.n	8003c84 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da0b      	bge.n	8003b80 <USBD_StdEPReq+0x194>
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3310      	adds	r3, #16
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	e00b      	b.n	8003b98 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fbf8 	bl	800439c <USBD_CtlSendData>
              break;
 8003bac:	e06a      	b.n	8003c84 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8003bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da11      	bge.n	8003bda <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	f003 020f 	and.w	r2, r3, #15
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3318      	adds	r3, #24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d117      	bne.n	8003c00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fb78 	bl	80042c8 <USBD_CtlError>
                  break;
 8003bd8:	e054      	b.n	8003c84 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003bda:	7bbb      	ldrb	r3, [r7, #14]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb65 	bl	80042c8 <USBD_CtlError>
                  break;
 8003bfe:	e041      	b.n	8003c84 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da0b      	bge.n	8003c20 <USBD_StdEPReq+0x234>
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3310      	adds	r3, #16
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	e00b      	b.n	8003c38 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003c3a:	7bbb      	ldrb	r3, [r7, #14]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <USBD_StdEPReq+0x25a>
 8003c40:	7bbb      	ldrb	r3, [r7, #14]
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d103      	bne.n	8003c4e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e00e      	b.n	8003c6c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 feb8 	bl	80049c8 <USBD_LL_IsStallEP>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fb92 	bl	800439c <USBD_CtlSendData>
              break;
 8003c78:	e004      	b.n	8003c84 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8003c7a:	6839      	ldr	r1, [r7, #0]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb23 	bl	80042c8 <USBD_CtlError>
              break;
 8003c82:	bf00      	nop
          }
          break;
 8003c84:	e004      	b.n	8003c90 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb1d 	bl	80042c8 <USBD_CtlError>
          break;
 8003c8e:	bf00      	nop
      }
      break;
 8003c90:	e004      	b.n	8003c9c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb17 	bl	80042c8 <USBD_CtlError>
      break;
 8003c9a:	bf00      	nop
  }

  return ret;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	885b      	ldrh	r3, [r3, #2]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	f200 8128 	bhi.w	8003f1e <USBD_GetDescriptor+0x276>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <USBD_GetDescriptor+0x2c>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003cf1 	.word	0x08003cf1
 8003cd8:	08003d09 	.word	0x08003d09
 8003cdc:	08003d49 	.word	0x08003d49
 8003ce0:	08003f1f 	.word	0x08003f1f
 8003ce4:	08003f1f 	.word	0x08003f1f
 8003ce8:	08003ebf 	.word	0x08003ebf
 8003cec:	08003eeb 	.word	0x08003eeb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	7c12      	ldrb	r2, [r2, #16]
 8003cfc:	f107 0108 	add.w	r1, r7, #8
 8003d00:	4610      	mov	r0, r2
 8003d02:	4798      	blx	r3
 8003d04:	60f8      	str	r0, [r7, #12]
      break;
 8003d06:	e112      	b.n	8003f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7c1b      	ldrb	r3, [r3, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	f107 0208 	add.w	r2, r7, #8
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
 8003d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	2202      	movs	r2, #2
 8003d28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8003d2a:	e100      	b.n	8003f2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f107 0208 	add.w	r2, r7, #8
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
 8003d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	2202      	movs	r2, #2
 8003d44:	701a      	strb	r2, [r3, #0]
      break;
 8003d46:	e0f2      	b.n	8003f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	885b      	ldrh	r3, [r3, #2]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	f200 80ac 	bhi.w	8003eac <USBD_GetDescriptor+0x204>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <USBD_GetDescriptor+0xb4>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d75 	.word	0x08003d75
 8003d60:	08003da9 	.word	0x08003da9
 8003d64:	08003ddd 	.word	0x08003ddd
 8003d68:	08003e11 	.word	0x08003e11
 8003d6c:	08003e45 	.word	0x08003e45
 8003d70:	08003e79 	.word	0x08003e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	7c12      	ldrb	r2, [r2, #16]
 8003d8c:	f107 0108 	add.w	r1, r7, #8
 8003d90:	4610      	mov	r0, r2
 8003d92:	4798      	blx	r3
 8003d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003d96:	e091      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa94 	bl	80042c8 <USBD_CtlError>
            err++;
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	3301      	adds	r3, #1
 8003da4:	72fb      	strb	r3, [r7, #11]
          break;
 8003da6:	e089      	b.n	8003ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	7c12      	ldrb	r2, [r2, #16]
 8003dc0:	f107 0108 	add.w	r1, r7, #8
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
 8003dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003dca:	e077      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa7a 	bl	80042c8 <USBD_CtlError>
            err++;
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8003dda:	e06f      	b.n	8003ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	7c12      	ldrb	r2, [r2, #16]
 8003df4:	f107 0108 	add.w	r1, r7, #8
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4798      	blx	r3
 8003dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003dfe:	e05d      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa60 	bl	80042c8 <USBD_CtlError>
            err++;
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8003e0e:	e055      	b.n	8003ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	7c12      	ldrb	r2, [r2, #16]
 8003e28:	f107 0108 	add.w	r1, r7, #8
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3
 8003e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e32:	e043      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa46 	bl	80042c8 <USBD_CtlError>
            err++;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	72fb      	strb	r3, [r7, #11]
          break;
 8003e42:	e03b      	b.n	8003ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	7c12      	ldrb	r2, [r2, #16]
 8003e5c:	f107 0108 	add.w	r1, r7, #8
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
 8003e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e66:	e029      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa2c 	bl	80042c8 <USBD_CtlError>
            err++;
 8003e70:	7afb      	ldrb	r3, [r7, #11]
 8003e72:	3301      	adds	r3, #1
 8003e74:	72fb      	strb	r3, [r7, #11]
          break;
 8003e76:	e021      	b.n	8003ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	7c12      	ldrb	r2, [r2, #16]
 8003e90:	f107 0108 	add.w	r1, r7, #8
 8003e94:	4610      	mov	r0, r2
 8003e96:	4798      	blx	r3
 8003e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e9a:	e00f      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa12 	bl	80042c8 <USBD_CtlError>
            err++;
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8003eaa:	e007      	b.n	8003ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa0a 	bl	80042c8 <USBD_CtlError>
          err++;
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8003eba:	e038      	b.n	8003f2e <USBD_GetDescriptor+0x286>
 8003ebc:	e037      	b.n	8003f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7c1b      	ldrb	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	f107 0208 	add.w	r2, r7, #8
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4798      	blx	r3
 8003ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003ed8:	e029      	b.n	8003f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f9f3 	bl	80042c8 <USBD_CtlError>
        err++;
 8003ee2:	7afb      	ldrb	r3, [r7, #11]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8003ee8:	e021      	b.n	8003f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7c1b      	ldrb	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f107 0208 	add.w	r2, r7, #8
 8003efe:	4610      	mov	r0, r2
 8003f00:	4798      	blx	r3
 8003f02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	2207      	movs	r2, #7
 8003f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003f0c:	e00f      	b.n	8003f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9d9 	bl	80042c8 <USBD_CtlError>
        err++;
 8003f16:	7afb      	ldrb	r3, [r7, #11]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8003f1c:	e007      	b.n	8003f2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9d1 	bl	80042c8 <USBD_CtlError>
      err++;
 8003f26:	7afb      	ldrb	r3, [r7, #11]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8003f2c:	bf00      	nop
  }

  if (err != 0U)
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11c      	bne.n	8003f6e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <USBD_GetDescriptor+0x2b6>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	88db      	ldrh	r3, [r3, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	88da      	ldrh	r2, [r3, #6]
 8003f46:	893b      	ldrh	r3, [r7, #8]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bf28      	it	cs
 8003f4c:	4613      	movcs	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa1f 	bl	800439c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	88db      	ldrh	r3, [r3, #6]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa58 	bl	800441c <USBD_CtlSendStatus>
 8003f6c:	e000      	b.n	8003f70 <USBD_GetDescriptor+0x2c8>
    return;
 8003f6e:	bf00      	nop
    }
  }
}
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop

08003f78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	889b      	ldrh	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d130      	bne.n	8003fec <USBD_SetAddress+0x74>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	88db      	ldrh	r3, [r3, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12c      	bne.n	8003fec <USBD_SetAddress+0x74>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	885b      	ldrh	r3, [r3, #2]
 8003f96:	2b7f      	cmp	r3, #127	; 0x7f
 8003f98:	d828      	bhi.n	8003fec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	885b      	ldrh	r3, [r3, #2]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d104      	bne.n	8003fba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f988 	bl	80042c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fb8:	e01c      	b.n	8003ff4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fd23 	bl	8004a12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa25 	bl	800441c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fe0:	e008      	b.n	8003ff4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fea:	e003      	b.n	8003ff4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f96a 	bl	80042c8 <USBD_CtlError>
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	885b      	ldrh	r3, [r3, #2]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b41      	ldr	r3, [pc, #260]	; (8004114 <USBD_SetConfig+0x118>)
 800400e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004010:	4b40      	ldr	r3, [pc, #256]	; (8004114 <USBD_SetConfig+0x118>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d904      	bls.n	8004022 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f954 	bl	80042c8 <USBD_CtlError>
 8004020:	e075      	b.n	800410e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004028:	2b02      	cmp	r3, #2
 800402a:	d002      	beq.n	8004032 <USBD_SetConfig+0x36>
 800402c:	2b03      	cmp	r3, #3
 800402e:	d023      	beq.n	8004078 <USBD_SetConfig+0x7c>
 8004030:	e062      	b.n	80040f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <USBD_SetConfig+0x118>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01a      	beq.n	8004070 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800403a:	4b36      	ldr	r3, [pc, #216]	; (8004114 <USBD_SetConfig+0x118>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2203      	movs	r2, #3
 8004048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800404c:	4b31      	ldr	r3, [pc, #196]	; (8004114 <USBD_SetConfig+0x118>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff f9f4 	bl	8003440 <USBD_SetClassConfig>
 8004058:	4603      	mov	r3, r0
 800405a:	2b02      	cmp	r3, #2
 800405c:	d104      	bne.n	8004068 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800405e:	6839      	ldr	r1, [r7, #0]
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f931 	bl	80042c8 <USBD_CtlError>
            return;
 8004066:	e052      	b.n	800410e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9d7 	bl	800441c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800406e:	e04e      	b.n	800410e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f9d3 	bl	800441c <USBD_CtlSendStatus>
        break;
 8004076:	e04a      	b.n	800410e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <USBD_SetConfig+0x118>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d112      	bne.n	80040a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <USBD_SetConfig+0x118>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <USBD_SetConfig+0x118>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff f9f0 	bl	800347e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9bc 	bl	800441c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80040a4:	e033      	b.n	800410e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <USBD_SetConfig+0x118>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d01d      	beq.n	80040f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff f9de 	bl	800347e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <USBD_SetConfig+0x118>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <USBD_SetConfig+0x118>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff f9b4 	bl	8003440 <USBD_SetClassConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d104      	bne.n	80040e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80040de:	6839      	ldr	r1, [r7, #0]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8f1 	bl	80042c8 <USBD_CtlError>
            return;
 80040e6:	e012      	b.n	800410e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f997 	bl	800441c <USBD_CtlSendStatus>
        break;
 80040ee:	e00e      	b.n	800410e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f993 	bl	800441c <USBD_CtlSendStatus>
        break;
 80040f6:	e00a      	b.n	800410e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8e4 	bl	80042c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <USBD_SetConfig+0x118>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff f9b9 	bl	800347e <USBD_ClrClassConfig>
        break;
 800410c:	bf00      	nop
    }
  }
}
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	2000014d 	.word	0x2000014d

08004118 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	88db      	ldrh	r3, [r3, #6]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d004      	beq.n	8004134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8cb 	bl	80042c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004132:	e021      	b.n	8004178 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800413a:	2b01      	cmp	r3, #1
 800413c:	db17      	blt.n	800416e <USBD_GetConfig+0x56>
 800413e:	2b02      	cmp	r3, #2
 8004140:	dd02      	ble.n	8004148 <USBD_GetConfig+0x30>
 8004142:	2b03      	cmp	r3, #3
 8004144:	d00b      	beq.n	800415e <USBD_GetConfig+0x46>
 8004146:	e012      	b.n	800416e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	2201      	movs	r2, #1
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f920 	bl	800439c <USBD_CtlSendData>
        break;
 800415c:	e00c      	b.n	8004178 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	2201      	movs	r2, #1
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f918 	bl	800439c <USBD_CtlSendData>
        break;
 800416c:	e004      	b.n	8004178 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8a9 	bl	80042c8 <USBD_CtlError>
        break;
 8004176:	bf00      	nop
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004190:	3b01      	subs	r3, #1
 8004192:	2b02      	cmp	r3, #2
 8004194:	d81e      	bhi.n	80041d4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	88db      	ldrh	r3, [r3, #6]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d004      	beq.n	80041a8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f891 	bl	80042c8 <USBD_CtlError>
        break;
 80041a6:	e01a      	b.n	80041de <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f043 0202 	orr.w	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	330c      	adds	r3, #12
 80041c8:	2202      	movs	r2, #2
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f8e5 	bl	800439c <USBD_CtlSendData>
      break;
 80041d2:	e004      	b.n	80041de <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f876 	bl	80042c8 <USBD_CtlError>
      break;
 80041dc:	bf00      	nop
  }
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	885b      	ldrh	r3, [r3, #2]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f90b 	bl	800441c <USBD_CtlSendStatus>
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800421e:	3b01      	subs	r3, #1
 8004220:	2b02      	cmp	r3, #2
 8004222:	d80b      	bhi.n	800423c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	885b      	ldrh	r3, [r3, #2]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10c      	bne.n	8004246 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8f1 	bl	800441c <USBD_CtlSendStatus>
      }
      break;
 800423a:	e004      	b.n	8004246 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f842 	bl	80042c8 <USBD_CtlError>
      break;
 8004244:	e000      	b.n	8004248 <USBD_ClrFeature+0x3a>
      break;
 8004246:	bf00      	nop
  }
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	785a      	ldrb	r2, [r3, #1]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	3302      	adds	r3, #2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b29a      	uxth	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	3303      	adds	r3, #3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b29b      	uxth	r3, r3
 800427e:	4413      	add	r3, r2
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b29a      	uxth	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	3305      	adds	r3, #5
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	b29b      	uxth	r3, r3
 800429a:	4413      	add	r3, r2
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3306      	adds	r3, #6
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3307      	adds	r3, #7
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	80da      	strh	r2, [r3, #6]

}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb39 	bl	800494c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fb35 	bl	800494c <USBD_LL_StallEP>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d032      	beq.n	8004366 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f834 	bl	800436e <USBD_GetLen>
 8004306:	4603      	mov	r3, r0
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	75fa      	strb	r2, [r7, #23]
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4413      	add	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	75fa      	strb	r2, [r7, #23]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	2203      	movs	r2, #3
 8004334:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004336:	e012      	b.n	800435e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60fa      	str	r2, [r7, #12]
 800433e:	7dfa      	ldrb	r2, [r7, #23]
 8004340:	1c51      	adds	r1, r2, #1
 8004342:	75f9      	strb	r1, [r7, #23]
 8004344:	4611      	mov	r1, r2
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	440a      	add	r2, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	75fa      	strb	r2, [r7, #23]
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e8      	bne.n	8004338 <USBD_GetString+0x4e>
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800437a:	e005      	b.n	8004388 <USBD_GetLen+0x1a>
  {
    len++;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	3301      	adds	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3301      	adds	r3, #1
 8004386:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f5      	bne.n	800437c <USBD_GetLen+0xe>
  }

  return len;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	2100      	movs	r1, #0
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fb43 	bl	8004a50 <USBD_LL_Transmit>

  return USBD_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	2100      	movs	r1, #0
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fb31 	bl	8004a50 <USBD_LL_Transmit>

  return USBD_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	2100      	movs	r1, #0
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fb42 	bl	8004a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2204      	movs	r2, #4
 8004428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800442c:	2300      	movs	r3, #0
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb0c 	bl	8004a50 <USBD_LL_Transmit>

  return USBD_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2205      	movs	r2, #5
 800444e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004452:	2300      	movs	r3, #0
 8004454:	2200      	movs	r2, #0
 8004456:	2100      	movs	r1, #0
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb1c 	bl	8004a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2212      	movs	r2, #18
 8004478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800447a:	4b03      	ldr	r3, [pc, #12]	; (8004488 <USBD_FS_DeviceDescriptor+0x20>)
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200000f0 	.word	0x200000f0

0800448c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2204      	movs	r2, #4
 800449c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000104 	.word	0x20000104

080044b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4907      	ldr	r1, [pc, #28]	; (80044e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80044c6:	4808      	ldr	r0, [pc, #32]	; (80044e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80044c8:	f7ff ff0f 	bl	80042ea <USBD_GetString>
 80044cc:	e004      	b.n	80044d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4904      	ldr	r1, [pc, #16]	; (80044e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80044d4:	f7ff ff09 	bl	80042ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000558 	.word	0x20000558
 80044e8:	08004bd0 	.word	0x08004bd0

080044ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	4904      	ldr	r1, [pc, #16]	; (800450c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80044fc:	4804      	ldr	r0, [pc, #16]	; (8004510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80044fe:	f7ff fef4 	bl	80042ea <USBD_GetString>
  return USBD_StrDesc;
 8004502:	4b02      	ldr	r3, [pc, #8]	; (800450c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000558 	.word	0x20000558
 8004510:	08004bdc 	.word	0x08004bdc

08004514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	221a      	movs	r2, #26
 8004524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004526:	f000 f843 	bl	80045b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800452a:	4b02      	ldr	r3, [pc, #8]	; (8004534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000108 	.word	0x20000108

08004538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4907      	ldr	r1, [pc, #28]	; (800456c <USBD_FS_ConfigStrDescriptor+0x34>)
 800454e:	4808      	ldr	r0, [pc, #32]	; (8004570 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004550:	f7ff fecb 	bl	80042ea <USBD_GetString>
 8004554:	e004      	b.n	8004560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	4904      	ldr	r1, [pc, #16]	; (800456c <USBD_FS_ConfigStrDescriptor+0x34>)
 800455a:	4805      	ldr	r0, [pc, #20]	; (8004570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800455c:	f7ff fec5 	bl	80042ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000558 	.word	0x20000558
 8004570:	08004bf0 	.word	0x08004bf0

08004574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4907      	ldr	r1, [pc, #28]	; (80045a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800458a:	4808      	ldr	r0, [pc, #32]	; (80045ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800458c:	f7ff fead 	bl	80042ea <USBD_GetString>
 8004590:	e004      	b.n	800459c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4904      	ldr	r1, [pc, #16]	; (80045a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004596:	4805      	ldr	r0, [pc, #20]	; (80045ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004598:	f7ff fea7 	bl	80042ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800459c:	4b02      	ldr	r3, [pc, #8]	; (80045a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000558 	.word	0x20000558
 80045ac:	08004c00 	.word	0x08004c00

080045b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <Get_SerialNum+0x44>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <Get_SerialNum+0x48>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <Get_SerialNum+0x4c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80045d6:	2208      	movs	r2, #8
 80045d8:	4909      	ldr	r1, [pc, #36]	; (8004600 <Get_SerialNum+0x50>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f814 	bl	8004608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80045e0:	2204      	movs	r2, #4
 80045e2:	4908      	ldr	r1, [pc, #32]	; (8004604 <Get_SerialNum+0x54>)
 80045e4:	68b8      	ldr	r0, [r7, #8]
 80045e6:	f000 f80f 	bl	8004608 <IntToUnicode>
  }
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	1ffff7e8 	.word	0x1ffff7e8
 80045f8:	1ffff7ec 	.word	0x1ffff7ec
 80045fc:	1ffff7f0 	.word	0x1ffff7f0
 8004600:	2000010a 	.word	0x2000010a
 8004604:	2000011a 	.word	0x2000011a

08004608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
 800461e:	e027      	b.n	8004670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	2b09      	cmp	r3, #9
 8004626:	d80b      	bhi.n	8004640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	0f1b      	lsrs	r3, r3, #28
 800462c:	b2da      	uxtb	r2, r3
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4619      	mov	r1, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	440b      	add	r3, r1
 8004638:	3230      	adds	r2, #48	; 0x30
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e00a      	b.n	8004656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	0f1b      	lsrs	r3, r3, #28
 8004644:	b2da      	uxtb	r2, r3
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4619      	mov	r1, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	440b      	add	r3, r1
 8004650:	3237      	adds	r2, #55	; 0x37
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	3301      	adds	r3, #1
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	3301      	adds	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
 8004670:	7dfa      	ldrb	r2, [r7, #23]
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d3d3      	bcc.n	8004620 <IntToUnicode+0x18>
  }
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
	...

08004684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <HAL_PCD_MspInit+0x54>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d11b      	bne.n	80046ce <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <HAL_PCD_MspInit+0x58>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <HAL_PCD_MspInit+0x58>)
 800469c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046a0:	61d3      	str	r3, [r2, #28]
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_PCD_MspInit+0x58>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	2013      	movs	r0, #19
 80046b4:	f7fc f96d 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80046b8:	2013      	movs	r0, #19
 80046ba:	f7fc f986 	bl	80009ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	2014      	movs	r0, #20
 80046c4:	f7fc f965 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80046c8:	2014      	movs	r0, #20
 80046ca:	f7fc f97e 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40005c00 	.word	0x40005c00
 80046dc:	40021000 	.word	0x40021000

080046e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7fe fed4 	bl	80034a4 <USBD_LL_SetupStage>
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	015b      	lsls	r3, r3, #5
 800471c:	4413      	add	r3, r2
 800471e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	4619      	mov	r1, r3
 8004728:	f7fe ff07 	bl	800353a <USBD_LL_DataOutStage>
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	015b      	lsls	r3, r3, #5
 800474c:	4413      	add	r3, r2
 800474e:	333c      	adds	r3, #60	; 0x3c
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	4619      	mov	r1, r3
 8004756:	f7fe ff61 	bl	800361c <USBD_LL_DataInStage>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f871 	bl	8003858 <USBD_LL_SOF>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d001      	beq.n	8004796 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004792:	f7fb fdf7 	bl	8000384 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800479c:	7bfa      	ldrb	r2, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f821 	bl	80037e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ffda 	bl	8003766 <USBD_LL_Reset>
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff f81b 	bl	8003806 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_PCD_SuspendCallback+0x30>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4a03      	ldr	r2, [pc, #12]	; (80047ec <HAL_PCD_SuspendCallback+0x30>)
 80047de:	f043 0306 	orr.w	r3, r3, #6
 80047e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f815 	bl	800382e <USBD_LL_Resume>
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <USBD_LL_Init+0x78>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a19      	ldr	r2, [pc, #100]	; (8004884 <USBD_LL_Init+0x78>)
 8004820:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <USBD_LL_Init+0x78>)
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <USBD_LL_Init+0x7c>)
 8004828:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <USBD_LL_Init+0x78>)
 800482c:	2208      	movs	r2, #8
 800482e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <USBD_LL_Init+0x78>)
 8004832:	2202      	movs	r2, #2
 8004834:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <USBD_LL_Init+0x78>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <USBD_LL_Init+0x78>)
 800483e:	2200      	movs	r2, #0
 8004840:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <USBD_LL_Init+0x78>)
 8004844:	2200      	movs	r2, #0
 8004846:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004848:	480e      	ldr	r0, [pc, #56]	; (8004884 <USBD_LL_Init+0x78>)
 800484a:	f7fc f8d8 	bl	80009fe <HAL_PCD_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004854:	f7fb fd96 	bl	8000384 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800485e:	2318      	movs	r3, #24
 8004860:	2200      	movs	r2, #0
 8004862:	2100      	movs	r1, #0
 8004864:	f7fc ff5c 	bl	8001720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800486e:	2358      	movs	r3, #88	; 0x58
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	f7fc ff54 	bl	8001720 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000758 	.word	0x20000758
 8004888:	40005c00 	.word	0x40005c00

0800488c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fc f98c 	bl	8000bc0 <HAL_PCD_Start>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f920 	bl	8004af4 <USBD_Get_USB_Status>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70bb      	strb	r3, [r7, #2]
 80048d8:	4613      	mov	r3, r2
 80048da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80048ea:	78bb      	ldrb	r3, [r7, #2]
 80048ec:	883a      	ldrh	r2, [r7, #0]
 80048ee:	78f9      	ldrb	r1, [r7, #3]
 80048f0:	f7fc fabf 	bl	8000e72 <HAL_PCD_EP_Open>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f8fa 	bl	8004af4 <USBD_Get_USB_Status>
 8004900:	4603      	mov	r3, r0
 8004902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004904:	7bbb      	ldrb	r3, [r7, #14]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7fc fb00 	bl	8000f32 <HAL_PCD_EP_Close>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f8db 	bl	8004af4 <USBD_Get_USB_Status>
 800493e:	4603      	mov	r3, r0
 8004940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004942:	7bbb      	ldrb	r3, [r7, #14]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fb96 	bl	800109c <HAL_PCD_EP_SetStall>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f8bc 	bl	8004af4 <USBD_Get_USB_Status>
 800497c:	4603      	mov	r3, r0
 800497e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004980:	7bbb      	ldrb	r3, [r7, #14]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	4611      	mov	r1, r2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc fbd1 	bl	8001150 <HAL_PCD_EP_ClrStall>
 80049ae:	4603      	mov	r3, r0
 80049b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f89d 	bl	8004af4 <USBD_Get_USB_Status>
 80049ba:	4603      	mov	r3, r0
 80049bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80049be:	7bbb      	ldrb	r3, [r7, #14]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da08      	bge.n	80049f6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	015b      	lsls	r3, r3, #5
 80049ee:	4413      	add	r3, r2
 80049f0:	332a      	adds	r3, #42	; 0x2a
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	e008      	b.n	8004a08 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc f9f9 	bl	8000e28 <HAL_PCD_SetAddress>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f859 	bl	8004af4 <USBD_Get_USB_Status>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	72fb      	strb	r3, [r7, #11]
 8004a60:	4613      	mov	r3, r2
 8004a62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004a72:	893b      	ldrh	r3, [r7, #8]
 8004a74:	7af9      	ldrb	r1, [r7, #11]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	f7fc fad7 	bl	800102a <HAL_PCD_EP_Transmit>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f836 	bl	8004af4 <USBD_Get_USB_Status>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004a8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	72fb      	strb	r3, [r7, #11]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	7af9      	ldrb	r1, [r7, #11]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	f7fc fa7a 	bl	8000fb6 <HAL_PCD_EP_Receive>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f813 	bl	8004af4 <USBD_Get_USB_Status>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
	...

08004af4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d817      	bhi.n	8004b38 <USBD_Get_USB_Status+0x44>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <USBD_Get_USB_Status+0x1c>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b27 	.word	0x08004b27
 8004b18:	08004b2d 	.word	0x08004b2d
 8004b1c:	08004b33 	.word	0x08004b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
    break;
 8004b24:	e00b      	b.n	8004b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b26:	2302      	movs	r3, #2
 8004b28:	73fb      	strb	r3, [r7, #15]
    break;
 8004b2a:	e008      	b.n	8004b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b30:	e005      	b.n	8004b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004b32:	2302      	movs	r3, #2
 8004b34:	73fb      	strb	r3, [r7, #15]
    break;
 8004b36:	e002      	b.n	8004b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8004b3c:	bf00      	nop
  }
  return usb_status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	2500      	movs	r5, #0
 8004b50:	4e0c      	ldr	r6, [pc, #48]	; (8004b84 <__libc_init_array+0x38>)
 8004b52:	4c0d      	ldr	r4, [pc, #52]	; (8004b88 <__libc_init_array+0x3c>)
 8004b54:	1ba4      	subs	r4, r4, r6
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	f000 f822 	bl	8004ba4 <_init>
 8004b60:	2500      	movs	r5, #0
 8004b62:	4e0a      	ldr	r6, [pc, #40]	; (8004b8c <__libc_init_array+0x40>)
 8004b64:	4c0a      	ldr	r4, [pc, #40]	; (8004b90 <__libc_init_array+0x44>)
 8004b66:	1ba4      	subs	r4, r4, r6
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	42a5      	cmp	r5, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b74:	4798      	blx	r3
 8004b76:	3501      	adds	r5, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7e:	4798      	blx	r3
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	08004c20 	.word	0x08004c20
 8004b88:	08004c20 	.word	0x08004c20
 8004b8c:	08004c20 	.word	0x08004c20
 8004b90:	08004c24 	.word	0x08004c24

08004b94 <memset>:
 8004b94:	4603      	mov	r3, r0
 8004b96:	4402      	add	r2, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
