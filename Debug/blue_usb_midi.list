
blue_usb_midi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  08004c4c  08004c4c  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c4c  08004c4c  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08004c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000124  08004d78  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  08004d78  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f88f  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269d  00000000  00000000  0002f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  00032080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f53  00000000  00000000  000332f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae37  00000000  00000000  0004924b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cf89  00000000  00000000  00054082  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c100b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a0  00000000  00000000  000c1088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000124 	.word	0x20000124
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bd0 	.word	0x08004bd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000128 	.word	0x20000128
 8000148:	08004bd0 	.word	0x08004bd0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fad9 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f847 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8a1 	bl	80002a0 <MX_GPIO_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  /* Init usb midi device */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800015e:	2200      	movs	r2, #0
 8000160:	491b      	ldr	r1, [pc, #108]	; (80001d0 <main+0x84>)
 8000162:	481c      	ldr	r0, [pc, #112]	; (80001d4 <main+0x88>)
 8000164:	f003 f928 	bl	80033b8 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8000168:	491b      	ldr	r1, [pc, #108]	; (80001d8 <main+0x8c>)
 800016a:	481a      	ldr	r0, [pc, #104]	; (80001d4 <main+0x88>)
 800016c:	f003 f94f 	bl	800340e <USBD_RegisterClass>
  USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8000170:	491a      	ldr	r1, [pc, #104]	; (80001dc <main+0x90>)
 8000172:	4818      	ldr	r0, [pc, #96]	; (80001d4 <main+0x88>)
 8000174:	f000 f9ea 	bl	800054c <USBD_MIDI_RegisterInterface>
  USBD_Start(&hUsbDeviceFS);
 8000178:	4816      	ldr	r0, [pc, #88]	; (80001d4 <main+0x88>)
 800017a:	f003 f961 	bl	8003440 <USBD_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 8; ++i)
 800017e:	2300      	movs	r3, #0
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	e020      	b.n	80001c6 <main+0x7a>
	  {
		  midi_note_on(midi_channel, sequence[i], 127);
 8000184:	4b16      	ldr	r3, [pc, #88]	; (80001e0 <main+0x94>)
 8000186:	7818      	ldrb	r0, [r3, #0]
 8000188:	4a16      	ldr	r2, [pc, #88]	; (80001e4 <main+0x98>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	b2db      	uxtb	r3, r3
 8000192:	227f      	movs	r2, #127	; 0x7f
 8000194:	4619      	mov	r1, r3
 8000196:	f000 fa2f 	bl	80005f8 <midi_note_on>
		  HAL_Delay(1000);
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	f000 fb15 	bl	80007cc <HAL_Delay>
		  midi_note_off(midi_channel, sequence[i], 127);
 80001a2:	4b0f      	ldr	r3, [pc, #60]	; (80001e0 <main+0x94>)
 80001a4:	7818      	ldrb	r0, [r3, #0]
 80001a6:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <main+0x98>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	227f      	movs	r2, #127	; 0x7f
 80001b2:	4619      	mov	r1, r3
 80001b4:	f000 fa33 	bl	800061e <midi_note_off>
		  HAL_Delay(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fb06 	bl	80007cc <HAL_Delay>
	  for(int i = 0; i < 8; ++i)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3301      	adds	r3, #1
 80001c4:	607b      	str	r3, [r7, #4]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b07      	cmp	r3, #7
 80001ca:	dddb      	ble.n	8000184 <main+0x38>
 80001cc:	e7d7      	b.n	800017e <main+0x32>
 80001ce:	bf00      	nop
 80001d0:	200000d4 	.word	0x200000d4
 80001d4:	20000294 	.word	0x20000294
 80001d8:	20000024 	.word	0x20000024
 80001dc:	200000c4 	.word	0x200000c4
 80001e0:	20000140 	.word	0x20000140
 80001e4:	20000000 	.word	0x20000000

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	; 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f004 fce2 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000218:	2301      	movs	r3, #1
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000234:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000238:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fac0 	bl	80017c4 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024a:	f000 f84b 	bl	80002e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2101      	movs	r1, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fd2a 	bl	8001cc4 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000276:	f000 f835 	bl	80002e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800027a:	2310      	movs	r3, #16
 800027c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800027e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000282:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fe86 	bl	8001f98 <HAL_RCCEx_PeriphCLKConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000292:	f000 f827 	bl	80002e4 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3750      	adds	r7, #80	; 0x50
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002ac:	f043 0320 	orr.w	r3, r3, #32
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0320 	and.w	r3, r3, #32
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <MX_GPIO_Init+0x40>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0304 	and.w	r3, r3, #4
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]

}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <HardFault_Handler+0x4>

08000366 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036a:	e7fe      	b.n	800036a <MemManage_Handler+0x4>

0800036c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <BusFault_Handler+0x4>

08000372 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000376:	e7fe      	b.n	8000376 <UsageFault_Handler+0x4>

08000378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a0:	f000 f9f8 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80003ae:	f000 fc43 	bl	8000c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000758 	.word	0x20000758

080003bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003c2:	f000 fc39 	bl	8000c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000758 	.word	0x20000758

080003d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <SystemInit+0x5c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a14      	ldr	r2, [pc, #80]	; (800042c <SystemInit+0x5c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <SystemInit+0x5c>)
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	4911      	ldr	r1, [pc, #68]	; (800042c <SystemInit+0x5c>)
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <SystemInit+0x60>)
 80003e8:	4013      	ands	r3, r2
 80003ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <SystemInit+0x5c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	; (800042c <SystemInit+0x5c>)
 80003f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <SystemInit+0x5c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0a      	ldr	r2, [pc, #40]	; (800042c <SystemInit+0x5c>)
 8000402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000406:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <SystemInit+0x5c>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a07      	ldr	r2, [pc, #28]	; (800042c <SystemInit+0x5c>)
 800040e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000412:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <SystemInit+0x5c>)
 8000416:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800041a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <SystemInit+0x64>)
 800041e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000422:	609a      	str	r2, [r3, #8]
#endif 
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	f8ff0000 	.word	0xf8ff0000
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8000444:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <USBD_MIDI_Init+0x40>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800044a:	2340      	movs	r3, #64	; 0x40
 800044c:	2202      	movs	r2, #2
 800044e:	2181      	movs	r1, #129	; 0x81
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f004 fa4c 	bl	80048ee <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	2202      	movs	r2, #2
 800045a:	2101      	movs	r1, #1
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f004 fa46 	bl	80048ee <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8000462:	2340      	movs	r3, #64	; 0x40
 8000464:	4a05      	ldr	r2, [pc, #20]	; (800047c <USBD_MIDI_Init+0x44>)
 8000466:	2101      	movs	r1, #1
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f004 fb2a 	bl	8004ac2 <USBD_LL_PrepareReceive>
  return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000144 	.word	0x20000144
 800047c:	20000150 	.word	0x20000150

08000480 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <USBD_MIDI_DeInit+0x2c>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8000492:	2181      	movs	r1, #129	; 0x81
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f004 fa50 	bl	800493a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800049a:	2101      	movs	r1, #1
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f004 fa4c 	bl	800493a <USBD_LL_CloseEP>
  return 0;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000144 	.word	0x20000144

080004b0 <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <USBD_MIDI_DataIn+0x28>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d102      	bne.n	80004ca <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <USBD_MIDI_DataIn+0x28>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	2000014c 	.word	0x2000014c

080004dc <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80004ee:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	330a      	adds	r3, #10
 80004fa:	015b      	lsls	r3, r3, #5
 80004fc:	4413      	add	r3, r2
 80004fe:	3304      	adds	r3, #4
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	897a      	ldrh	r2, [r7, #10]
 800050a:	4611      	mov	r1, r2
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <USBD_MIDI_DataOut+0x4c>)
 800050e:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <USBD_MIDI_DataOut+0x4c>)
 8000514:	2101      	movs	r1, #1
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f004 fad3 	bl	8004ac2 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000150 	.word	0x20000150

0800052c <USBD_MIDI_GetCfgDesc>:
    USB_Tx_State = 1;
    USBD_LL_Transmit (pInstance, MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
  }
}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2265      	movs	r2, #101	; 0x65
 8000538:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800053a:	4b03      	ldr	r3, [pc, #12]	; (8000548 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000005c 	.word	0x2000005c

0800054c <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 8000556:	2302      	movs	r3, #2
 8000558:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <midi_note_send>:
  MIDI_DataTx
};
 

void midi_note_send(uint8_t channel, bool on, uint8_t note, uint8_t velocity)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4604      	mov	r4, r0
 8000580:	4608      	mov	r0, r1
 8000582:	4611      	mov	r1, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4623      	mov	r3, r4
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	4603      	mov	r3, r0
 800058c:	71bb      	strb	r3, [r7, #6]
 800058e:	460b      	mov	r3, r1
 8000590:	717b      	strb	r3, [r7, #5]
 8000592:	4613      	mov	r3, r2
 8000594:	713b      	strb	r3, [r7, #4]
	uint8_t msg[4] = {0};
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]

	if(on)
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d007      	beq.n	80005b0 <midi_note_send+0x38>
	{
		msg[0] = 0x09;           /* USB frame */
 80005a0:	2309      	movs	r3, #9
 80005a2:	733b      	strb	r3, [r7, #12]
		msg[1] = MIDI_NOTE_ON | channel; /* Command and channel */
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	737b      	strb	r3, [r7, #13]
 80005ae:	e006      	b.n	80005be <midi_note_send+0x46>
	}
	else
	{
		msg[0] = 0x08;            /* USB frame */
 80005b0:	2308      	movs	r3, #8
 80005b2:	733b      	strb	r3, [r7, #12]
		msg[1] = MIDI_NOTE_OFF | channel;  /* Command and channel */
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	737b      	strb	r3, [r7, #13]
	}

	msg[2] = note > 127 ? 127 : note;
 80005be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db01      	blt.n	80005ca <midi_note_send+0x52>
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	e000      	b.n	80005cc <midi_note_send+0x54>
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	73bb      	strb	r3, [r7, #14]
	msg[3] = velocity > 127 ? 127 : velocity;
 80005ce:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db01      	blt.n	80005da <midi_note_send+0x62>
 80005d6:	793b      	ldrb	r3, [r7, #4]
 80005d8:	e000      	b.n	80005dc <midi_note_send+0x64>
 80005da:	237f      	movs	r3, #127	; 0x7f
 80005dc:	73fb      	strb	r3, [r7, #15]

	USBD_LL_Transmit (&hUsbDeviceFS, MIDI_IN_EP,(uint8_t*)msg, 4);
 80005de:	f107 020c 	add.w	r2, r7, #12
 80005e2:	2304      	movs	r3, #4
 80005e4:	2181      	movs	r1, #129	; 0x81
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <midi_note_send+0x7c>)
 80005e8:	f004 fa48 	bl	8004a7c <USBD_LL_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	20000294 	.word	0x20000294

080005f8 <midi_note_on>:

void midi_note_on(uint8_t channel, uint8_t note, uint8_t velocity)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	460b      	mov	r3, r1
 8000604:	71bb      	strb	r3, [r7, #6]
 8000606:	4613      	mov	r3, r2
 8000608:	717b      	strb	r3, [r7, #5]
	midi_note_send(channel, true, note, velocity);
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	79f8      	ldrb	r0, [r7, #7]
 8000610:	2101      	movs	r1, #1
 8000612:	f7ff ffb1 	bl	8000578 <midi_note_send>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <midi_note_off>:

void midi_note_off(uint8_t channel, uint8_t note, uint8_t velocity)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	460b      	mov	r3, r1
 800062a:	71bb      	strb	r3, [r7, #6]
 800062c:	4613      	mov	r3, r2
 800062e:	717b      	strb	r3, [r7, #5]
	midi_note_send(channel, false, note, velocity);
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	79f8      	ldrb	r0, [r7, #7]
 8000636:	2100      	movs	r1, #0
 8000638:	f7ff ff9e 	bl	8000578 <midi_note_send>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MIDI_DataRx>:


static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
//							sus = data;
//							break;
//					}
//          break;
//  }
	return 0;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <MIDI_DataTx>:
{
	MIDI_DataTx(msg, length);
}

static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800066c:	e017      	b.n	800069e <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	441a      	add	r2, r3
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MIDI_DataTx+0x58>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	7811      	ldrb	r1, [r2, #0]
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <MIDI_DataTx+0x5c>)
 800067c:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MIDI_DataTx+0x58>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <MIDI_DataTx+0x58>)
 8000686:	6013      	str	r3, [r2, #0]
    i++;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MIDI_DataTx+0x58>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000696:	d102      	bne.n	800069e <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MIDI_DataTx+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d3e3      	bcc.n	800066e <MIDI_DataTx+0x12>
    }
  }
  return USBD_OK;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000148 	.word	0x20000148
 80006b8:	20000190 	.word	0x20000190

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006be:	e003      	b.n	80006c8 <LoopCopyDataInit>

080006c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006c6:	3104      	adds	r1, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d0:	d3f6      	bcc.n	80006c0 <CopyDataInit>
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006d4:	e002      	b.n	80006dc <LoopFillZerobss>

080006d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006d8:	f842 3b04 	str.w	r3, [r2], #4

080006dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e0:	d3f9      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff fe75 	bl	80003d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f004 fa47 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd2f 	bl	800014c <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r3, =_sidata
 80006f0:	08004c54 	.word	0x08004c54
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006f8:	20000124 	.word	0x20000124
  ldr r2, =_sbss
 80006fc:	20000124 	.word	0x20000124
  ldr r3, = _ebss
 8000700:	200009c4 	.word	0x200009c4

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f945 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f808 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fde4 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x54>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f95d 	bl	8000a12 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f925 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x5c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000020 	.word	0x20000020
 800078c:	200000d0 	.word	0x200000d0
 8000790:	200000cc 	.word	0x200000cc

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	20000290 	.word	0x20000290

080007b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000290 	.word	0x20000290

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_Delay+0x40>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f2:	bf00      	nop
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000d0 	.word	0x200000d0

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <__NVIC_EnableIRQ+0x34>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f7ff ff90 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff2d 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff42 	bl	8000858 <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff90 	bl	8000900 <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5f 	bl	80008ac <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff35 	bl	8000874 <__NVIC_EnableIRQ>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffa2 	bl	8000964 <SysTick_Config>
 8000a20:	4603      	mov	r3, r0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2c:	b08b      	sub	sp, #44	; 0x2c
 8000a2e:	af06      	add	r7, sp, #24
 8000a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e0d3      	b.n	8000be4 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f003 fe2d 	bl	80046b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2203      	movs	r2, #3
 8000a5a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fb75 	bl	8002152 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	687e      	ldr	r6, [r7, #4]
 8000a70:	466d      	mov	r5, sp
 8000a72:	f106 0410 	add.w	r4, r6, #16
 8000a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	602b      	str	r3, [r5, #0]
 8000a7e:	1d33      	adds	r3, r6, #4
 8000a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f001 fb3e 	bl	8002104 <USB_CoreInit>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2202      	movs	r2, #2
 8000a92:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e0a4      	b.n	8000be4 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fb72 	bl	800218a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e035      	b.n	8000b18 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	015b      	lsls	r3, r3, #5
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3329      	adds	r3, #41	; 0x29
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	015b      	lsls	r3, r3, #5
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3328      	adds	r3, #40	; 0x28
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	7bfa      	ldrb	r2, [r7, #15]
 8000acc:	b291      	uxth	r1, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	015b      	lsls	r3, r3, #5
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3336      	adds	r3, #54	; 0x36
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	015b      	lsls	r3, r3, #5
 8000ae0:	4413      	add	r3, r2
 8000ae2:	332b      	adds	r3, #43	; 0x2b
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	015b      	lsls	r3, r3, #5
 8000aee:	4413      	add	r3, r2
 8000af0:	3338      	adds	r3, #56	; 0x38
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	015b      	lsls	r3, r3, #5
 8000afc:	4413      	add	r3, r2
 8000afe:	333c      	adds	r3, #60	; 0x3c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	3302      	adds	r3, #2
 8000b0a:	015b      	lsls	r3, r3, #5
 8000b0c:	4413      	add	r3, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	3301      	adds	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3c4      	bcc.n	8000aac <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e031      	b.n	8000b8c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	4413      	add	r3, r2
 8000b30:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	015b      	lsls	r3, r3, #5
 8000b3e:	4413      	add	r3, r2
 8000b40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b44:	7bfa      	ldrb	r2, [r7, #15]
 8000b46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	015b      	lsls	r3, r3, #5
 8000b4e:	4413      	add	r3, r2
 8000b50:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	015b      	lsls	r3, r3, #5
 8000b5e:	4413      	add	r3, r2
 8000b60:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	015b      	lsls	r3, r3, #5
 8000b6e:	4413      	add	r3, r2
 8000b70:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	330a      	adds	r3, #10
 8000b7e:	015b      	lsls	r3, r3, #5
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3c8      	bcc.n	8000b28 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	687e      	ldr	r6, [r7, #4]
 8000b9e:	466d      	mov	r5, sp
 8000ba0:	f106 0410 	add.w	r4, r6, #16
 8000ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	602b      	str	r3, [r5, #0]
 8000bac:	1d33      	adds	r3, r6, #4
 8000bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f001 faf6 	bl	80021a2 <USB_DevInit>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e00d      	b.n	8000be4 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fb34 	bl	800324a <USB_DevDisconnect>

  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d101      	bne.n	8000c02 <HAL_PCD_Start+0x16>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e016      	b.n	8000c30 <HAL_PCD_Start+0x44>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f003 ff7b 	bl	8004b08 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fb0d 	bl	8003236 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fa7f 	bl	8002124 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fb0a 	bl	800325e <USB_ReadInterrupts>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c54:	d102      	bne.n	8000c5c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fade 	bl	8001218 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fafc 	bl	800325e <USB_ReadInterrupts>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c70:	d112      	bne.n	8000c98 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c84:	b292      	uxth	r2, r2
 8000c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f003 fd8d 	bl	80047aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c90:	2100      	movs	r1, #0
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f8de 	bl	8000e54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fade 	bl	800325e <USB_ReadInterrupts>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cac:	d10b      	bne.n	8000cc6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fac7 	bl	800325e <USB_ReadInterrupts>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cda:	d10b      	bne.n	8000cf4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fab0 	bl	800325e <USB_ReadInterrupts>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d08:	d126      	bne.n	8000d58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0204 	bic.w	r2, r2, #4
 8000d1c:	b292      	uxth	r2, r2
 8000d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0208 	bic.w	r2, r2, #8
 8000d34:	b292      	uxth	r2, r2
 8000d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f003 fd6e 	bl	800481c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d52:	b292      	uxth	r2, r2
 8000d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fa7e 	bl	800325e <USB_ReadInterrupts>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d6c:	d13d      	bne.n	8000dea <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f042 0208 	orr.w	r2, r2, #8
 8000d80:	b292      	uxth	r2, r2
 8000d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d98:	b292      	uxth	r2, r2
 8000d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0204 	orr.w	r2, r2, #4
 8000db0:	b292      	uxth	r2, r2
 8000db2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fa4f 	bl	800325e <USB_ReadInterrupts>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dca:	d10b      	bne.n	8000de4 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dde:	b292      	uxth	r2, r2
 8000de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f003 fcff 	bl	80047e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fa35 	bl	800325e <USB_ReadInterrupts>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dfe:	d10e      	bne.n	8000e1e <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e12:	b292      	uxth	r2, r2
 8000e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f003 fcb8 	bl	800478e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fa1b 	bl	800325e <USB_ReadInterrupts>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e32:	d10b      	bne.n	8000e4c <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e46:	b292      	uxth	r2, r2
 8000e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_SetAddress+0x1a>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e013      	b.n	8000e96 <HAL_PCD_SetAddress+0x42>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 f9c2 	bl	8003210 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	803b      	strh	r3, [r7, #0]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da0b      	bge.n	8000edc <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	015b      	lsls	r3, r3, #5
 8000ecc:	3328      	adds	r3, #40	; 0x28
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
 8000eda:	e00b      	b.n	8000ef4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f00:	883a      	ldrh	r2, [r7, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	78ba      	ldrb	r2, [r7, #2]
 8000f0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	785b      	ldrb	r3, [r3, #1]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d102      	bne.n	8000f2a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_PCD_EP_Open+0x9a>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e00e      	b.n	8000f56 <HAL_PCD_EP_Open+0xb8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 f950 	bl	80021ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000f54:	7afb      	ldrb	r3, [r7, #11]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da0b      	bge.n	8000f8a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	3328      	adds	r3, #40	; 0x28
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2201      	movs	r2, #1
 8000f86:	705a      	strb	r2, [r3, #1]
 8000f88:	e00b      	b.n	8000fa2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_PCD_EP_Close+0x5e>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e00e      	b.n	8000fda <HAL_PCD_EP_Close+0x7c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fbfc 	bl	80027c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	015b      	lsls	r3, r3, #5
 8000ffa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2200      	movs	r2, #0
 800101a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	b2da      	uxtb	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6979      	ldr	r1, [r7, #20]
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fd5b 	bl	8002af4 <USB_EPStartXfer>
 800103e:	e005      	b.n	800104c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fd54 	bl	8002af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	460b      	mov	r3, r1
 8001064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	015b      	lsls	r3, r3, #5
 800106e:	3328      	adds	r3, #40	; 0x28
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2201      	movs	r2, #1
 800108c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	b2da      	uxtb	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d106      	bne.n	80010b2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6979      	ldr	r1, [r7, #20]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fd22 	bl	8002af4 <USB_EPStartXfer>
 80010b0:	e005      	b.n	80010be <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fd1b 	bl	8002af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	f003 0207 	and.w	r2, r3, #7
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d901      	bls.n	80010e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e046      	b.n	8001174 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da0b      	bge.n	8001106 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	3328      	adds	r3, #40	; 0x28
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2201      	movs	r2, #1
 8001102:	705a      	strb	r2, [r3, #1]
 8001104:	e009      	b.n	800111a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2201      	movs	r2, #1
 800111e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	b2da      	uxtb	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_PCD_EP_SetStall+0x72>
 8001136:	2302      	movs	r3, #2
 8001138:	e01c      	b.n	8001174 <HAL_PCD_EP_SetStall+0xac>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 ff8b 	bl	8003064 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	f002 f889 	bl	800327c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f003 020f 	and.w	r2, r3, #15
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d901      	bls.n	800119a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e03a      	b.n	8001210 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800119a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da0b      	bge.n	80011ba <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	015b      	lsls	r3, r3, #5
 80011aa:	3328      	adds	r3, #40	; 0x28
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	705a      	strb	r2, [r3, #1]
 80011b8:	e00b      	b.n	80011d2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_EP_ClrStall+0x76>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e00e      	b.n	8001210 <HAL_PCD_EP_ClrStall+0x94>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 ff71 	bl	80030e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001220:	e282      	b.n	8001728 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800122c:	8afb      	ldrh	r3, [r7, #22]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001236:	7d7b      	ldrb	r3, [r7, #21]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8142 	bne.w	80014c2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b00      	cmp	r3, #0
 8001246:	d151      	bne.n	80012ec <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001258:	b29c      	uxth	r4, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001266:	b29b      	uxth	r3, r3
 8001268:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3328      	adds	r3, #40	; 0x28
 800126e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	3302      	adds	r3, #2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	441a      	add	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f003 fa57 	bl	8004760 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8234 	beq.w	8001728 <PCD_EP_ISR_Handler+0x510>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 822f 	bne.w	8001728 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80012ea:	e21d      	b.n	8001728 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012f2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012fc:	8a7b      	ldrh	r3, [r7, #18]
 80012fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001302:	2b00      	cmp	r3, #0
 8001304:	d033      	beq.n	800136e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	3306      	adds	r3, #6
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	4413      	add	r3, r2
 8001324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001344:	b29b      	uxth	r3, r3
 8001346:	f001 ffe8 	bl	800331a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b29a      	uxth	r2, r3
 8001352:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001356:	4013      	ands	r3, r2
 8001358:	b29c      	uxth	r4, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001362:	b292      	uxth	r2, r2
 8001364:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f003 f9d0 	bl	800470c <HAL_PCD_SetupStageCallback>
 800136c:	e1dc      	b.n	8001728 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800136e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f280 81d8 	bge.w	8001728 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29a      	uxth	r2, r3
 8001380:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001384:	4013      	ands	r3, r2
 8001386:	b29c      	uxth	r4, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001390:	b292      	uxth	r2, r2
 8001392:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	3306      	adds	r3, #6
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d019      	beq.n	80013fc <PCD_EP_ISR_Handler+0x1e4>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6959      	ldr	r1, [r3, #20]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f001 ff9a 	bl	800331a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013f4:	2100      	movs	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f003 f99a 	bl	8004730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461c      	mov	r4, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800140a:	b29b      	uxth	r3, r3
 800140c:	441c      	add	r4, r3
 800140e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001412:	461c      	mov	r4, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10e      	bne.n	800143a <PCD_EP_ISR_Handler+0x222>
 800141c:	8823      	ldrh	r3, [r4, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001424:	b29b      	uxth	r3, r3
 8001426:	8023      	strh	r3, [r4, #0]
 8001428:	8823      	ldrh	r3, [r4, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001434:	b29b      	uxth	r3, r3
 8001436:	8023      	strh	r3, [r4, #0]
 8001438:	e02d      	b.n	8001496 <PCD_EP_ISR_Handler+0x27e>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b3e      	cmp	r3, #62	; 0x3e
 8001440:	d812      	bhi.n	8001468 <PCD_EP_ISR_Handler+0x250>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	085b      	lsrs	r3, r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <PCD_EP_ISR_Handler+0x244>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	3301      	adds	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	b29b      	uxth	r3, r3
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	b29b      	uxth	r3, r3
 8001464:	8023      	strh	r3, [r4, #0]
 8001466:	e016      	b.n	8001496 <PCD_EP_ISR_Handler+0x27e>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	095b      	lsrs	r3, r3, #5
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <PCD_EP_ISR_Handler+0x26a>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	3b01      	subs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b29b      	uxth	r3, r3
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	b29b      	uxth	r3, r3
 800148a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800148e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001492:	b29b      	uxth	r3, r3
 8001494:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014a6:	b29c      	uxth	r4, r3
 80014a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80014ac:	b29c      	uxth	r4, r3
 80014ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80014b2:	b29c      	uxth	r4, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4ba2      	ldr	r3, [pc, #648]	; (8001744 <PCD_EP_ISR_Handler+0x52c>)
 80014ba:	4323      	orrs	r3, r4
 80014bc:	b29b      	uxth	r3, r3
 80014be:	8013      	strh	r3, [r2, #0]
 80014c0:	e132      	b.n	8001728 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	7d7b      	ldrb	r3, [r7, #21]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f280 80d1 	bge.w	800167e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	7d7b      	ldrb	r3, [r7, #21]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f0:	4013      	ands	r3, r2
 80014f2:	b29c      	uxth	r4, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	7d7b      	ldrb	r3, [r7, #21]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001504:	b292      	uxth	r2, r2
 8001506:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d121      	bne.n	8001562 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	3306      	adds	r3, #6
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001546:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d072      	beq.n	8001634 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6959      	ldr	r1, [r3, #20]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	88da      	ldrh	r2, [r3, #6]
 800155a:	8bfb      	ldrh	r3, [r7, #30]
 800155c:	f001 fedd 	bl	800331a <USB_ReadPMA>
 8001560:	e068      	b.n	8001634 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d021      	beq.n	80015c0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	3302      	adds	r3, #2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80015a6:	8bfb      	ldrh	r3, [r7, #30]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02a      	beq.n	8001602 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6959      	ldr	r1, [r3, #20]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	891a      	ldrh	r2, [r3, #8]
 80015b8:	8bfb      	ldrh	r3, [r7, #30]
 80015ba:	f001 feae 	bl	800331a <USB_ReadPMA>
 80015be:	e020      	b.n	8001602 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	3306      	adds	r3, #6
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80015ea:	8bfb      	ldrh	r3, [r7, #30]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6959      	ldr	r1, [r3, #20]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	895a      	ldrh	r2, [r3, #10]
 80015fc:	8bfb      	ldrh	r3, [r7, #30]
 80015fe:	f001 fe8c 	bl	800331a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161c:	b29c      	uxth	r4, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	441a      	add	r2, r3
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <PCD_EP_ISR_Handler+0x530>)
 800162e:	4323      	orrs	r3, r4
 8001630:	b29b      	uxth	r3, r3
 8001632:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	8bfb      	ldrh	r3, [r7, #30]
 800163a:	441a      	add	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	8bfb      	ldrh	r3, [r7, #30]
 8001646:	441a      	add	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <PCD_EP_ISR_Handler+0x446>
 8001654:	8bfa      	ldrh	r2, [r7, #30]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	429a      	cmp	r2, r3
 800165c:	d206      	bcs.n	800166c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f003 f863 	bl	8004730 <HAL_PCD_DataOutStageCallback>
 800166a:	e008      	b.n	800167e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	7819      	ldrb	r1, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fcb2 	bl	8000fe2 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800167e:	8a7b      	ldrh	r3, [r7, #18]
 8001680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d04f      	beq.n	8001728 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001688:	7d7b      	ldrb	r3, [r7, #21]
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	3328      	adds	r3, #40	; 0x28
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	7d7b      	ldrb	r3, [r7, #21]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ac:	b29c      	uxth	r4, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	7d7b      	ldrb	r3, [r7, #21]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	441a      	add	r2, r3
 80016ba:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80016be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4413      	add	r3, r2
 80016da:	3302      	adds	r3, #2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	441a      	add	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f003 f826 	bl	8004760 <HAL_PCD_DataInStageCallback>
 8001714:	e008      	b.n	8001728 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	7819      	ldrb	r1, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fc97 	bl	8001056 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21b      	sxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f6ff ad74 	blt.w	8001222 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	ffff8080 	.word	0xffff8080
 8001748:	ffff80c0 	.word	0xffff80c0

0800174c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	4613      	mov	r3, r2
 800175c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800176a:	897b      	ldrh	r3, [r7, #10]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	015b      	lsls	r3, r3, #5
 8001772:	3328      	adds	r3, #40	; 0x28
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e006      	b.n	800178a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800177c:	897b      	ldrh	r3, [r7, #10]
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800178a:	893b      	ldrh	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2200      	movs	r2, #0
 8001794:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	b29a      	uxth	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	80da      	strh	r2, [r3, #6]
 800179e:	e00b      	b.n	80017b8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2201      	movs	r2, #1
 80017a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e26c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00c      	beq.n	800180a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d112      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
 80017fc:	4b8c      	ldr	r3, [pc, #560]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d10b      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x12c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d168      	bne.n	80018f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e246      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x76>
 800182c:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x98>
 8001842:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7a      	ldr	r2, [pc, #488]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a77      	ldr	r2, [pc, #476]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0xbc>
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 8001880:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a67      	ldr	r2, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7fe ff8a 	bl	80007b8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7fe ff86 	bl	80007b8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1fa      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe4>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe ff76 	bl	80007b8 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7fe ff72 	bl	80007b8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1e6      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x10c>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d063      	beq.n	80019c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d11c      	bne.n	8001950 <HAL_RCC_OscConfig+0x18c>
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x176>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e1ba      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4939      	ldr	r1, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	e03a      	b.n	80019c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe ff2b 	bl	80007b8 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7fe ff27 	bl	80007b8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e19b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4927      	ldr	r1, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe ff0a 	bl	80007b8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7fe ff06 	bl	80007b8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e17a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d03a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d019      	beq.n	8001a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7fe feea 	bl	80007b8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7fe fee6 	bl	80007b8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e15a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 faa8 	bl	8001f5c <RCC_Delay>
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7fe fed0 	bl	80007b8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7fe fecc 	bl	80007b8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d908      	bls.n	8001a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e140      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	42420000 	.word	0x42420000
 8001a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b9e      	ldr	r3, [pc, #632]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e9      	bne.n	8001a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a6 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a93      	ldr	r2, [pc, #588]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a8a      	ldr	r2, [pc, #552]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fe8d 	bl	80007b8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7fe fe89 	bl	80007b8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0fd      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x312>
 8001ac8:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	e02d      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x334>
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	e01c      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x356>
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e00b      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a63      	ldr	r2, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d015      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7fe fe3d 	bl	80007b8 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7fe fe39 	bl	80007b8 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e0ab      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ee      	beq.n	8001b42 <HAL_RCC_OscConfig+0x37e>
 8001b64:	e014      	b.n	8001b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fe27 	bl	80007b8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe fe23 	bl	80007b8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e095      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8081 	beq.w	8001cae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d061      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d146      	bne.n	8001c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x4fc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fdf7 	bl	80007b8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe fdf3 	bl	80007b8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e067      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	492d      	ldr	r1, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a19      	ldr	r1, [r3, #32]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x4fc>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7fe fdc7 	bl	80007b8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe fdc3 	bl	80007b8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e037      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46a>
 8001c4c:	e02f      	b.n	8001cae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_RCC_OscConfig+0x4fc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fdb0 	bl	80007b8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe fdac 	bl	80007b8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e020      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x498>
 8001c7a:	e018      	b.n	8001cae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e013      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420060 	.word	0x42420060

08001cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0d0      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4965      	ldr	r1, [pc, #404]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d040      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d115      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e073      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06b      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4936      	ldr	r1, [pc, #216]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7fe fd00 	bl	80007b8 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7fe fcfc 	bl	80007b8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e053      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d210      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4922      	ldr	r1, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f821 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e56:	4601      	mov	r1, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	fa21 f303 	lsr.w	r3, r1, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1cc>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fc5e 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004c3c 	.word	0x08004c3c
 8001e90:	20000020 	.word	0x20000020
 8001e94:	200000cc 	.word	0x200000cc

08001e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b490      	push	{r4, r7}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea0:	1d3c      	adds	r4, r7, #4
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x46>
 8001ed6:	e02d      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eea:	4413      	add	r3, r2
 8001eec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ef0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0c5b      	lsrs	r3, r3, #17
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f16:	fb02 f203 	mul.w	r2, r2, r3
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	e004      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	623b      	str	r3, [r7, #32]
      break;
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f36:	623b      	str	r3, [r7, #32]
      break;
 8001f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc90      	pop	{r4, r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	08004be8 	.word	0x08004be8
 8001f4c:	08004bf8 	.word	0x08004bf8
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	003d0900 	.word	0x003d0900

08001f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <RCC_Delay+0x34>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <RCC_Delay+0x38>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f78:	bf00      	nop
  }
  while (Delay --);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	60fa      	str	r2, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <RCC_Delay+0x1c>
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000020 	.word	0x20000020
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d07d      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d118      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fbde 	bl	80007b8 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	e008      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002000:	f7fe fbda 	bl	80007b8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06d      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02e      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d027      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d014      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fba9 	bl	80007b8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fba5 	bl	80007b8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e036      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ee      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4917      	ldr	r1, [pc, #92]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	4313      	orrs	r3, r2
 800209c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	490b      	ldr	r1, [pc, #44]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4904      	ldr	r1, [pc, #16]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	42420440 	.word	0x42420440

08002104 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002104:	b084      	sub	sp, #16
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	f107 0014 	add.w	r0, r7, #20
 8002112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	b004      	add	sp, #16
 8002122:	4770      	bx	lr

08002124 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800212c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002130:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002138:	b29a      	uxth	r2, r3
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	4313      	orrs	r3, r2
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800215a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800215e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002166:	b29b      	uxth	r3, r3
 8002168:	b21a      	sxth	r2, r3
 800216a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800216e:	43db      	mvns	r3, r3
 8002170:	b21b      	sxth	r3, r3
 8002172:	4013      	ands	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021a2:	b084      	sub	sp, #16
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	f107 0014 	add.w	r0, r7, #20
 80021b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffa5 	bl	8002124 <USB_EnableGlobalInt>

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021e6:	b004      	add	sp, #16
 80021e8:	4770      	bx	lr
	...

080021ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80021ec:	b490      	push	{r4, r7}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800220c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002210:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	78db      	ldrb	r3, [r3, #3]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d819      	bhi.n	800224e <USB_ActivateEndpoint+0x62>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <USB_ActivateEndpoint+0x34>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	08002245 	.word	0x08002245
 8002228:	08002255 	.word	0x08002255
 800222c:	0800223b 	.word	0x0800223b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002230:	89bb      	ldrh	r3, [r7, #12]
 8002232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002236:	81bb      	strh	r3, [r7, #12]
      break;
 8002238:	e00d      	b.n	8002256 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800223a:	89bb      	ldrh	r3, [r7, #12]
 800223c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002240:	81bb      	strh	r3, [r7, #12]
      break;
 8002242:	e008      	b.n	8002256 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002244:	89bb      	ldrh	r3, [r7, #12]
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	81bb      	strh	r3, [r7, #12]
      break;
 800224c:	e003      	b.n	8002256 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      break;
 8002252:	e000      	b.n	8002256 <USB_ActivateEndpoint+0x6a>
      break;
 8002254:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	89bb      	ldrh	r3, [r7, #12]
 8002262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228c:	b29a      	uxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b29c      	uxth	r4, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <USB_ActivateEndpoint+0x2e0>)
 80022a4:	4323      	orrs	r3, r4
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	7b1b      	ldrb	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8112 	bne.w	80024d8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d067      	beq.n	800238c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022bc:	687c      	ldr	r4, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	441c      	add	r4, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4423      	add	r3, r4
 80022d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d4:	461c      	mov	r4, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	88db      	ldrh	r3, [r3, #6]
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	b29b      	uxth	r3, r3
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29c      	uxth	r4, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d014      	beq.n	8002326 <USB_ActivateEndpoint+0x13a>
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	b29c      	uxth	r4, r3
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <USB_ActivateEndpoint+0x2e4>)
 8002320:	4323      	orrs	r3, r4
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d018      	beq.n	8002360 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002344:	b29c      	uxth	r4, r3
 8002346:	f084 0320 	eor.w	r3, r4, #32
 800234a:	b29c      	uxth	r4, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <USB_ActivateEndpoint+0x2e0>)
 8002358:	4323      	orrs	r3, r4
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]
 800235e:	e22b      	b.n	80027b8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002376:	b29c      	uxth	r4, r3
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	4b52      	ldr	r3, [pc, #328]	; (80024cc <USB_ActivateEndpoint+0x2e0>)
 8002384:	4323      	orrs	r3, r4
 8002386:	b29b      	uxth	r3, r3
 8002388:	8013      	strh	r3, [r2, #0]
 800238a:	e215      	b.n	80027b8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800238c:	687c      	ldr	r4, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	441c      	add	r4, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4423      	add	r3, r4
 80023a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023a4:	461c      	mov	r4, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	88db      	ldrh	r3, [r3, #6]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023b4:	687c      	ldr	r4, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	441c      	add	r4, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4423      	add	r3, r4
 80023c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023cc:	461c      	mov	r4, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10e      	bne.n	80023f4 <USB_ActivateEndpoint+0x208>
 80023d6:	8823      	ldrh	r3, [r4, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8023      	strh	r3, [r4, #0]
 80023e2:	8823      	ldrh	r3, [r4, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8023      	strh	r3, [r4, #0]
 80023f2:	e02d      	b.n	8002450 <USB_ActivateEndpoint+0x264>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b3e      	cmp	r3, #62	; 0x3e
 80023fa:	d812      	bhi.n	8002422 <USB_ActivateEndpoint+0x236>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <USB_ActivateEndpoint+0x22a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3301      	adds	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	b29b      	uxth	r3, r3
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	b29b      	uxth	r3, r3
 800241e:	8023      	strh	r3, [r4, #0]
 8002420:	e016      	b.n	8002450 <USB_ActivateEndpoint+0x264>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <USB_ActivateEndpoint+0x250>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	b29b      	uxth	r3, r3
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	b29b      	uxth	r3, r3
 8002444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244c:	b29b      	uxth	r3, r3
 800244e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29c      	uxth	r4, r3
 800245e:	4623      	mov	r3, r4
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d014      	beq.n	8002492 <USB_ActivateEndpoint+0x2a6>
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	b29c      	uxth	r4, r3
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <USB_ActivateEndpoint+0x2e8>)
 800248c:	4323      	orrs	r3, r4
 800248e:	b29b      	uxth	r3, r3
 8002490:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	b29c      	uxth	r4, r3
 80024aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80024ae:	b29c      	uxth	r4, r3
 80024b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80024b4:	b29c      	uxth	r4, r3
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	441a      	add	r2, r3
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <USB_ActivateEndpoint+0x2e0>)
 80024c2:	4323      	orrs	r3, r4
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8013      	strh	r3, [r2, #0]
 80024c8:	e176      	b.n	80027b8 <USB_ActivateEndpoint+0x5cc>
 80024ca:	bf00      	nop
 80024cc:	ffff8080 	.word	0xffff8080
 80024d0:	ffff80c0 	.word	0xffff80c0
 80024d4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	b29c      	uxth	r4, r3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	4b96      	ldr	r3, [pc, #600]	; (8002754 <USB_ActivateEndpoint+0x568>)
 80024fc:	4323      	orrs	r3, r4
 80024fe:	b29b      	uxth	r3, r3
 8002500:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002502:	687c      	ldr	r4, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	441c      	add	r4, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4423      	add	r3, r4
 8002516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251a:	461c      	mov	r4, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	891b      	ldrh	r3, [r3, #8]
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	8023      	strh	r3, [r4, #0]
 800252a:	687c      	ldr	r4, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	441c      	add	r4, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4423      	add	r3, r4
 800253e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002542:	461c      	mov	r4, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	895b      	ldrh	r3, [r3, #10]
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8088 	bne.w	800266c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29c      	uxth	r4, r3
 800256a:	4623      	mov	r3, r4
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d014      	beq.n	800259e <USB_ActivateEndpoint+0x3b2>
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	b29c      	uxth	r4, r3
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	4b70      	ldr	r3, [pc, #448]	; (8002758 <USB_ActivateEndpoint+0x56c>)
 8002598:	4323      	orrs	r3, r4
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29c      	uxth	r4, r3
 80025ac:	4623      	mov	r3, r4
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d014      	beq.n	80025e0 <USB_ActivateEndpoint+0x3f4>
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025cc:	b29c      	uxth	r4, r3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <USB_ActivateEndpoint+0x570>)
 80025da:	4323      	orrs	r3, r4
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	b29c      	uxth	r4, r3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	4b56      	ldr	r3, [pc, #344]	; (800275c <USB_ActivateEndpoint+0x570>)
 8002604:	4323      	orrs	r3, r4
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	b29c      	uxth	r4, r3
 8002622:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002626:	b29c      	uxth	r4, r3
 8002628:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800262c:	b29c      	uxth	r4, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	441a      	add	r2, r3
 8002638:	4b49      	ldr	r3, [pc, #292]	; (8002760 <USB_ActivateEndpoint+0x574>)
 800263a:	4323      	orrs	r3, r4
 800263c:	b29b      	uxth	r3, r3
 800263e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002656:	b29c      	uxth	r4, r3
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <USB_ActivateEndpoint+0x574>)
 8002664:	4323      	orrs	r3, r4
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]
 800266a:	e0a5      	b.n	80027b8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29c      	uxth	r4, r3
 800267a:	4623      	mov	r3, r4
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d014      	beq.n	80026ae <USB_ActivateEndpoint+0x4c2>
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	b29c      	uxth	r4, r3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <USB_ActivateEndpoint+0x56c>)
 80026a8:	4323      	orrs	r3, r4
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29c      	uxth	r4, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d014      	beq.n	80026f0 <USB_ActivateEndpoint+0x504>
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026dc:	b29c      	uxth	r4, r3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <USB_ActivateEndpoint+0x570>)
 80026ea:	4323      	orrs	r3, r4
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	b29c      	uxth	r4, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	441a      	add	r2, r3
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <USB_ActivateEndpoint+0x56c>)
 8002714:	4323      	orrs	r3, r4
 8002716:	b29b      	uxth	r3, r3
 8002718:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d020      	beq.n	8002764 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002738:	b29c      	uxth	r4, r3
 800273a:	f084 0320 	eor.w	r3, r4, #32
 800273e:	b29c      	uxth	r4, r3
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <USB_ActivateEndpoint+0x574>)
 800274c:	4323      	orrs	r3, r4
 800274e:	b29b      	uxth	r3, r3
 8002750:	8013      	strh	r3, [r2, #0]
 8002752:	e01c      	b.n	800278e <USB_ActivateEndpoint+0x5a2>
 8002754:	ffff8180 	.word	0xffff8180
 8002758:	ffffc080 	.word	0xffffc080
 800275c:	ffff80c0 	.word	0xffff80c0
 8002760:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800277a:	b29c      	uxth	r4, r3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <USB_ActivateEndpoint+0x5d8>)
 8002788:	4323      	orrs	r3, r4
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	b29c      	uxth	r4, r3
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <USB_ActivateEndpoint+0x5d8>)
 80027b2:	4323      	orrs	r3, r4
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc90      	pop	{r4, r7}
 80027c2:	4770      	bx	lr
 80027c4:	ffff8080 	.word	0xffff8080

080027c8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027c8:	b490      	push	{r4, r7}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	7b1b      	ldrb	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d171      	bne.n	80028be <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29c      	uxth	r4, r3
 80027f0:	4623      	mov	r3, r4
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d014      	beq.n	8002824 <USB_DeactivateEndpoint+0x5c>
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	b29c      	uxth	r4, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <USB_DeactivateEndpoint+0x204>)
 800281e:	4323      	orrs	r3, r4
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283a:	b29c      	uxth	r4, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <USB_DeactivateEndpoint+0x208>)
 8002848:	4323      	orrs	r3, r4
 800284a:	b29b      	uxth	r3, r3
 800284c:	8013      	strh	r3, [r2, #0]
 800284e:	e144      	b.n	8002ada <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29c      	uxth	r4, r3
 800285e:	4623      	mov	r3, r4
 8002860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d014      	beq.n	8002892 <USB_DeactivateEndpoint+0xca>
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	b29c      	uxth	r4, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	4b52      	ldr	r3, [pc, #328]	; (80029d4 <USB_DeactivateEndpoint+0x20c>)
 800288c:	4323      	orrs	r3, r4
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	b29c      	uxth	r4, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	441a      	add	r2, r3
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <USB_DeactivateEndpoint+0x208>)
 80028b6:	4323      	orrs	r3, r4
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	8013      	strh	r3, [r2, #0]
 80028bc:	e10d      	b.n	8002ada <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 8088 	bne.w	80029d8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29c      	uxth	r4, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d014      	beq.n	800290a <USB_DeactivateEndpoint+0x142>
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	b29c      	uxth	r4, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <USB_DeactivateEndpoint+0x20c>)
 8002904:	4323      	orrs	r3, r4
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29c      	uxth	r4, r3
 8002918:	4623      	mov	r3, r4
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <USB_DeactivateEndpoint+0x184>
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	b29c      	uxth	r4, r3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	441a      	add	r2, r3
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <USB_DeactivateEndpoint+0x204>)
 8002946:	4323      	orrs	r3, r4
 8002948:	b29b      	uxth	r3, r3
 800294a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	b29c      	uxth	r4, r3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <USB_DeactivateEndpoint+0x204>)
 8002970:	4323      	orrs	r3, r4
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	b29c      	uxth	r4, r3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <USB_DeactivateEndpoint+0x208>)
 800299a:	4323      	orrs	r3, r4
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b6:	b29c      	uxth	r4, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <USB_DeactivateEndpoint+0x208>)
 80029c4:	4323      	orrs	r3, r4
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8013      	strh	r3, [r2, #0]
 80029ca:	e086      	b.n	8002ada <USB_DeactivateEndpoint+0x312>
 80029cc:	ffff80c0 	.word	0xffff80c0
 80029d0:	ffff8080 	.word	0xffff8080
 80029d4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29c      	uxth	r4, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d014      	beq.n	8002a1a <USB_DeactivateEndpoint+0x252>
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	b29c      	uxth	r4, r3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <USB_DeactivateEndpoint+0x320>)
 8002a14:	4323      	orrs	r3, r4
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29c      	uxth	r4, r3
 8002a28:	4623      	mov	r3, r4
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <USB_DeactivateEndpoint+0x294>
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a48:	b29c      	uxth	r4, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <USB_DeactivateEndpoint+0x324>)
 8002a56:	4323      	orrs	r3, r4
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	b29c      	uxth	r4, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <USB_DeactivateEndpoint+0x320>)
 8002a80:	4323      	orrs	r3, r4
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9c:	b29c      	uxth	r4, r3
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	441a      	add	r2, r3
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <USB_DeactivateEndpoint+0x328>)
 8002aaa:	4323      	orrs	r3, r4
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	b29c      	uxth	r4, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <USB_DeactivateEndpoint+0x328>)
 8002ad4:	4323      	orrs	r3, r4
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc90      	pop	{r4, r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	ffffc080 	.word	0xffffc080
 8002aec:	ffff80c0 	.word	0xffff80c0
 8002af0:	ffff8080 	.word	0xffff8080

08002af4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b08d      	sub	sp, #52	; 0x34
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f040 8160 	bne.w	8002dc8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d909      	bls.n	8002b28 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	1ad2      	subs	r2, r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e005      	b.n	8002b34 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	7b1b      	ldrb	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d119      	bne.n	8002b70 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6959      	ldr	r1, [r3, #20]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	88da      	ldrh	r2, [r3, #6]
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fba2 	bl	8003292 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002b4e:	687c      	ldr	r4, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	441c      	add	r4, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4423      	add	r3, r4
 8002b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b66:	461c      	mov	r4, r3
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8023      	strh	r3, [r4, #0]
 8002b6e:	e10f      	b.n	8002d90 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d065      	beq.n	8002c52 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b86:	687c      	ldr	r4, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d148      	bne.n	8002c22 <USB_EPStartXfer+0x12e>
 8002b90:	687c      	ldr	r4, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	441c      	add	r4, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4423      	add	r3, r4
 8002ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba8:	461c      	mov	r4, r3
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10e      	bne.n	8002bce <USB_EPStartXfer+0xda>
 8002bb0:	8823      	ldrh	r3, [r4, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	8023      	strh	r3, [r4, #0]
 8002bbc:	8823      	ldrh	r3, [r4, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8023      	strh	r3, [r4, #0]
 8002bcc:	e03d      	b.n	8002c4a <USB_EPStartXfer+0x156>
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002bd2:	d810      	bhi.n	8002bf6 <USB_EPStartXfer+0x102>
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <USB_EPStartXfer+0xf6>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3301      	adds	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	029b      	lsls	r3, r3, #10
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8023      	strh	r3, [r4, #0]
 8002bf4:	e029      	b.n	8002c4a <USB_EPStartXfer+0x156>
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <USB_EPStartXfer+0x118>
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8023      	strh	r3, [r4, #0]
 8002c20:	e013      	b.n	8002c4a <USB_EPStartXfer+0x156>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10f      	bne.n	8002c4a <USB_EPStartXfer+0x156>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	441c      	add	r4, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4423      	add	r3, r4
 8002c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	895b      	ldrh	r3, [r3, #10]
 8002c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c50:	e063      	b.n	8002d1a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d148      	bne.n	8002cec <USB_EPStartXfer+0x1f8>
 8002c5a:	687c      	ldr	r4, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	441c      	add	r4, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	4423      	add	r3, r4
 8002c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c72:	461c      	mov	r4, r3
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <USB_EPStartXfer+0x1a4>
 8002c7a:	8823      	ldrh	r3, [r4, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8023      	strh	r3, [r4, #0]
 8002c86:	8823      	ldrh	r3, [r4, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8023      	strh	r3, [r4, #0]
 8002c96:	e03d      	b.n	8002d14 <USB_EPStartXfer+0x220>
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c9c:	d810      	bhi.n	8002cc0 <USB_EPStartXfer+0x1cc>
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <USB_EPStartXfer+0x1c0>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8023      	strh	r3, [r4, #0]
 8002cbe:	e029      	b.n	8002d14 <USB_EPStartXfer+0x220>
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <USB_EPStartXfer+0x1e2>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	8023      	strh	r3, [r4, #0]
 8002cea:	e013      	b.n	8002d14 <USB_EPStartXfer+0x220>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10f      	bne.n	8002d14 <USB_EPStartXfer+0x220>
 8002cf4:	687c      	ldr	r4, [r7, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	441c      	add	r4, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4423      	add	r3, r4
 8002d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	891b      	ldrh	r3, [r3, #8]
 8002d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6959      	ldr	r1, [r3, #20]
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fab4 	bl	8003292 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <USB_EPStartXfer+0x26a>
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	b29c      	uxth	r4, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	441a      	add	r2, r3
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <USB_EPStartXfer+0x4cc>)
 8002d56:	4323      	orrs	r3, r4
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	8013      	strh	r3, [r2, #0]
 8002d5c:	e018      	b.n	8002d90 <USB_EPStartXfer+0x29c>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d114      	bne.n	8002d90 <USB_EPStartXfer+0x29c>
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7c:	b29c      	uxth	r4, r3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	4b8e      	ldr	r3, [pc, #568]	; (8002fc4 <USB_EPStartXfer+0x4d0>)
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da6:	b29c      	uxth	r4, r3
 8002da8:	f084 0310 	eor.w	r3, r4, #16
 8002dac:	b29c      	uxth	r4, r3
 8002dae:	f084 0320 	eor.w	r3, r4, #32
 8002db2:	b29c      	uxth	r4, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <USB_EPStartXfer+0x4d4>)
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
 8002dc6:	e146      	b.n	8003056 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d909      	bls.n	8002de8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	619a      	str	r2, [r3, #24]
 8002de6:	e005      	b.n	8002df4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	7b1b      	ldrb	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d148      	bne.n	8002e8e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002dfc:	687c      	ldr	r4, [r7, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	441c      	add	r4, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4423      	add	r3, r4
 8002e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e14:	461c      	mov	r4, r3
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10e      	bne.n	8002e3a <USB_EPStartXfer+0x346>
 8002e1c:	8823      	ldrh	r3, [r4, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8023      	strh	r3, [r4, #0]
 8002e28:	8823      	ldrh	r3, [r4, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8023      	strh	r3, [r4, #0]
 8002e38:	e0f2      	b.n	8003020 <USB_EPStartXfer+0x52c>
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e3e:	d810      	bhi.n	8002e62 <USB_EPStartXfer+0x36e>
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <USB_EPStartXfer+0x362>
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8023      	strh	r3, [r4, #0]
 8002e60:	e0de      	b.n	8003020 <USB_EPStartXfer+0x52c>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <USB_EPStartXfer+0x384>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	8023      	strh	r3, [r4, #0]
 8002e8c:	e0c8      	b.n	8003020 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d148      	bne.n	8002f28 <USB_EPStartXfer+0x434>
 8002e96:	687c      	ldr	r4, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	441c      	add	r4, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4423      	add	r3, r4
 8002eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eae:	461c      	mov	r4, r3
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <USB_EPStartXfer+0x3e0>
 8002eb6:	8823      	ldrh	r3, [r4, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8023      	strh	r3, [r4, #0]
 8002ec2:	8823      	ldrh	r3, [r4, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	8023      	strh	r3, [r4, #0]
 8002ed2:	e03d      	b.n	8002f50 <USB_EPStartXfer+0x45c>
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed8:	d810      	bhi.n	8002efc <USB_EPStartXfer+0x408>
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <USB_EPStartXfer+0x3fc>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8023      	strh	r3, [r4, #0]
 8002efa:	e029      	b.n	8002f50 <USB_EPStartXfer+0x45c>
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <USB_EPStartXfer+0x41e>
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8023      	strh	r3, [r4, #0]
 8002f26:	e013      	b.n	8002f50 <USB_EPStartXfer+0x45c>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10f      	bne.n	8002f50 <USB_EPStartXfer+0x45c>
 8002f30:	687c      	ldr	r4, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	441c      	add	r4, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	4423      	add	r3, r4
 8002f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f48:	461c      	mov	r4, r3
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8023      	strh	r3, [r4, #0]
 8002f50:	687c      	ldr	r4, [r7, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d14e      	bne.n	8002ff8 <USB_EPStartXfer+0x504>
 8002f5a:	687c      	ldr	r4, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	441c      	add	r4, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4423      	add	r3, r4
 8002f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f72:	461c      	mov	r4, r3
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <USB_EPStartXfer+0x4a4>
 8002f7a:	8823      	ldrh	r3, [r4, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	8023      	strh	r3, [r4, #0]
 8002f86:	8823      	ldrh	r3, [r4, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8023      	strh	r3, [r4, #0]
 8002f96:	e043      	b.n	8003020 <USB_EPStartXfer+0x52c>
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9c:	d816      	bhi.n	8002fcc <USB_EPStartXfer+0x4d8>
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <USB_EPStartXfer+0x4c0>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8023      	strh	r3, [r4, #0]
 8002fbe:	e02f      	b.n	8003020 <USB_EPStartXfer+0x52c>
 8002fc0:	ffff80c0 	.word	0xffff80c0
 8002fc4:	ffffc080 	.word	0xffffc080
 8002fc8:	ffff8080 	.word	0xffff8080
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <USB_EPStartXfer+0x4ee>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8023      	strh	r3, [r4, #0]
 8002ff6:	e013      	b.n	8003020 <USB_EPStartXfer+0x52c>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10f      	bne.n	8003020 <USB_EPStartXfer+0x52c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	441c      	add	r4, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	4423      	add	r3, r4
 8003012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	b29a      	uxth	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	b29c      	uxth	r4, r3
 8003038:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800303c:	b29c      	uxth	r4, r3
 800303e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003042:	b29c      	uxth	r4, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <USB_EPStartXfer+0x56c>)
 8003050:	4323      	orrs	r3, r4
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3734      	adds	r7, #52	; 0x34
 800305c:	46bd      	mov	sp, r7
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	ffff8080 	.word	0xffff8080

08003064 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003064:	b490      	push	{r4, r7}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308c:	b29c      	uxth	r4, r3
 800308e:	f084 0310 	eor.w	r3, r4, #16
 8003092:	b29c      	uxth	r4, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	441a      	add	r2, r3
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <USB_EPSetStall+0x80>)
 80030a0:	4323      	orrs	r3, r4
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
 80030a6:	e017      	b.n	80030d8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	b29c      	uxth	r4, r3
 80030c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80030c4:	b29c      	uxth	r4, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <USB_EPSetStall+0x80>)
 80030d2:	4323      	orrs	r3, r4
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc90      	pop	{r4, r7}
 80030e2:	4770      	bx	lr
 80030e4:	ffff8080 	.word	0xffff8080

080030e8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030e8:	b490      	push	{r4, r7}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	7b1b      	ldrb	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d17d      	bne.n	80031f6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03d      	beq.n	800317e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29c      	uxth	r4, r3
 8003110:	4623      	mov	r3, r4
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <USB_EPClearStall+0x5c>
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003130:	b29c      	uxth	r4, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	441a      	add	r2, r3
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <USB_EPClearStall+0x11c>)
 800313e:	4323      	orrs	r3, r4
 8003140:	b29b      	uxth	r3, r3
 8003142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	78db      	ldrb	r3, [r3, #3]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d054      	beq.n	80031f6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003162:	b29c      	uxth	r4, r3
 8003164:	f084 0320 	eor.w	r3, r4, #32
 8003168:	b29c      	uxth	r4, r3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <USB_EPClearStall+0x120>)
 8003176:	4323      	orrs	r3, r4
 8003178:	b29b      	uxth	r3, r3
 800317a:	8013      	strh	r3, [r2, #0]
 800317c:	e03b      	b.n	80031f6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29c      	uxth	r4, r3
 800318c:	4623      	mov	r3, r4
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d014      	beq.n	80031c0 <USB_EPClearStall+0xd8>
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	b29c      	uxth	r4, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <USB_EPClearStall+0x124>)
 80031ba:	4323      	orrs	r3, r4
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	b29c      	uxth	r4, r3
 80031d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031dc:	b29c      	uxth	r4, r3
 80031de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031e2:	b29c      	uxth	r4, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <USB_EPClearStall+0x120>)
 80031f0:	4323      	orrs	r3, r4
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc90      	pop	{r4, r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	ffff80c0 	.word	0xffff80c0
 8003208:	ffff8080 	.word	0xffff8080
 800320c:	ffffc080 	.word	0xffffc080

08003210 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800326c:	b29b      	uxth	r3, r3
 800326e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003292:	b480      	push	{r7}
 8003294:	b08d      	sub	sp, #52	; 0x34
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	4611      	mov	r1, r2
 800329e:	461a      	mov	r2, r3
 80032a0:	460b      	mov	r3, r1
 80032a2:	80fb      	strh	r3, [r7, #6]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80032a8:	88bb      	ldrh	r3, [r7, #4]
 80032aa:	3301      	adds	r3, #1
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	005a      	lsls	r2, r3, #1
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e01e      	b.n	800330a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	3302      	adds	r3, #2
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	3302      	adds	r3, #2
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	3301      	adds	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	3b01      	subs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1dd      	bne.n	80032cc <USB_WritePMA+0x3a>
  }
}
 8003310:	bf00      	nop
 8003312:	3734      	adds	r7, #52	; 0x34
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800331a:	b480      	push	{r7}
 800331c:	b08b      	sub	sp, #44	; 0x2c
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	4611      	mov	r1, r2
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	80fb      	strh	r3, [r7, #6]
 800332c:	4613      	mov	r3, r2
 800332e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	005a      	lsls	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e01b      	b.n	800338c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	3302      	adds	r3, #2
 8003360:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3301      	adds	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b2da      	uxtb	r2, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	3302      	adds	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	3b01      	subs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e0      	bne.n	8003354 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003392:	88bb      	ldrh	r3, [r7, #4]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	701a      	strb	r2, [r3, #0]
  }
}
 80033ae:	bf00      	nop
 80033b0:	372c      	adds	r7, #44	; 0x2c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e01a      	b.n	8003406 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 fa1a 	bl	8004838 <USBD_LL_Init>

  return USBD_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e001      	b.n	8003434 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003430:	2302      	movs	r3, #2
 8003432:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 fa35 	bl	80048b8 <USBD_LL_Start>

  return USBD_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003478:	2302      	movs	r3, #2
 800347a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	4611      	mov	r1, r2
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	4611      	mov	r1, r2
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3

  return USBD_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 feca 	bl	800427c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2b01      	cmp	r3, #1
 800350a:	d00c      	beq.n	8003526 <USBD_LL_SetupStage+0x56>
 800350c:	2b01      	cmp	r3, #1
 800350e:	d302      	bcc.n	8003516 <USBD_LL_SetupStage+0x46>
 8003510:	2b02      	cmp	r3, #2
 8003512:	d010      	beq.n	8003536 <USBD_LL_SetupStage+0x66>
 8003514:	e017      	b.n	8003546 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9ca 	bl	80038b8 <USBD_StdDevReq>
      break;
 8003524:	e01a      	b.n	800355c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa2c 	bl	800398c <USBD_StdItfReq>
      break;
 8003534:	e012      	b.n	800355c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa6a 	bl	8003a18 <USBD_StdEPReq>
      break;
 8003544:	e00a      	b.n	800355c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800354c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f001 fa0f 	bl	8004978 <USBD_LL_StallEP>
      break;
 800355a:	bf00      	nop
  }

  return USBD_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	460b      	mov	r3, r1
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003574:	7afb      	ldrb	r3, [r7, #11]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d14b      	bne.n	8003612 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003580:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003588:	2b03      	cmp	r3, #3
 800358a:	d134      	bne.n	80035f6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d919      	bls.n	80035cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	1ad2      	subs	r2, r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d203      	bcs.n	80035ba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	e002      	b.n	80035c0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 ff2d 	bl	8004424 <USBD_CtlContinueRx>
 80035ca:	e038      	b.n	800363e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d105      	bne.n	80035ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 ff2a 	bl	8004448 <USBD_CtlSendStatus>
 80035f4:	e023      	b.n	800363e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d11e      	bne.n	800363e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003608:	2100      	movs	r1, #0
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 f9b4 	bl	8004978 <USBD_LL_StallEP>
 8003610:	e015      	b.n	800363e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003624:	2b03      	cmp	r3, #3
 8003626:	d108      	bne.n	800363a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	7afa      	ldrb	r2, [r7, #11]
 8003632:	4611      	mov	r1, r2
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	4798      	blx	r3
 8003638:	e001      	b.n	800363e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800363a:	2302      	movs	r3, #2
 800363c:	e000      	b.n	8003640 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	460b      	mov	r3, r1
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d17f      	bne.n	800375c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3314      	adds	r3, #20
 8003660:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003668:	2b02      	cmp	r3, #2
 800366a:	d15c      	bne.n	8003726 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d915      	bls.n	80036a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 feb5 	bl	8004400 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003696:	2300      	movs	r3, #0
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f001 fa10 	bl	8004ac2 <USBD_LL_PrepareReceive>
 80036a2:	e04e      	b.n	8003742 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80036b0:	fb02 f201 	mul.w	r2, r2, r1
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11c      	bne.n	80036f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d316      	bcc.n	80036f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d20f      	bcs.n	80036f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fe91 	bl	8004400 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80036e6:	2300      	movs	r3, #0
 80036e8:	2200      	movs	r2, #0
 80036ea:	2100      	movs	r1, #0
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f001 f9e8 	bl	8004ac2 <USBD_LL_PrepareReceive>
 80036f2:	e026      	b.n	8003742 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003706:	2b03      	cmp	r3, #3
 8003708:	d105      	bne.n	8003716 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f001 f92d 	bl	8004978 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fea5 	bl	800446e <USBD_CtlReceiveStatus>
 8003724:	e00d      	b.n	8003742 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800372c:	2b04      	cmp	r3, #4
 800372e:	d004      	beq.n	800373a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f001 f91b 	bl	8004978 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11d      	bne.n	8003788 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fe83 	bl	8003458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800375a:	e015      	b.n	8003788 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800376e:	2b03      	cmp	r3, #3
 8003770:	d108      	bne.n	8003784 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	7afa      	ldrb	r2, [r7, #11]
 800377c:	4611      	mov	r1, r2
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	4798      	blx	r3
 8003782:	e001      	b.n	8003788 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003784:	2302      	movs	r3, #2
 8003786:	e000      	b.n	800378a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 f8a4 	bl	80048ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f001 f896 	bl	80048ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6852      	ldr	r2, [r2, #4]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	4611      	mov	r1, r2
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
  }

  return USBD_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003868:	2b04      	cmp	r3, #4
 800386a:	d105      	bne.n	8003878 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003892:	2b03      	cmp	r3, #3
 8003894:	d10b      	bne.n	80038ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d004      	beq.n	80038dc <USBD_StdDevReq+0x24>
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d002      	beq.n	80038dc <USBD_StdDevReq+0x24>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <USBD_StdDevReq+0x34>
 80038da:	e04c      	b.n	8003976 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      break;
 80038ea:	e049      	b.n	8003980 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b09      	cmp	r3, #9
 80038f2:	d83a      	bhi.n	800396a <USBD_StdDevReq+0xb2>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <USBD_StdDevReq+0x44>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	08003961 	.word	0x08003961
 8003904:	0800396b 	.word	0x0800396b
 8003908:	08003957 	.word	0x08003957
 800390c:	0800396b 	.word	0x0800396b
 8003910:	0800392f 	.word	0x0800392f
 8003914:	08003925 	.word	0x08003925
 8003918:	0800396b 	.word	0x0800396b
 800391c:	08003943 	.word	0x08003943
 8003920:	08003939 	.word	0x08003939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9d4 	bl	8003cd4 <USBD_GetDescriptor>
          break;
 800392c:	e022      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fb37 	bl	8003fa4 <USBD_SetAddress>
          break;
 8003936:	e01d      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fb74 	bl	8004028 <USBD_SetConfig>
          break;
 8003940:	e018      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003942:	6839      	ldr	r1, [r7, #0]
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fbfd 	bl	8004144 <USBD_GetConfig>
          break;
 800394a:	e013      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fc2c 	bl	80041ac <USBD_GetStatus>
          break;
 8003954:	e00e      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fc5a 	bl	8004212 <USBD_SetFeature>
          break;
 800395e:	e009      	b.n	8003974 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fc69 	bl	800423a <USBD_ClrFeature>
          break;
 8003968:	e004      	b.n	8003974 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fcc1 	bl	80042f4 <USBD_CtlError>
          break;
 8003972:	bf00      	nop
      }
      break;
 8003974:	e004      	b.n	8003980 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003976:	6839      	ldr	r1, [r7, #0]
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fcbb 	bl	80042f4 <USBD_CtlError>
      break;
 800397e:	bf00      	nop
  }

  return ret;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop

0800398c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d003      	beq.n	80039ae <USBD_StdItfReq+0x22>
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d001      	beq.n	80039ae <USBD_StdItfReq+0x22>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12a      	bne.n	8003a04 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80039b4:	3b01      	subs	r3, #1
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d81d      	bhi.n	80039f6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	889b      	ldrh	r3, [r3, #4]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d813      	bhi.n	80039ec <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	88db      	ldrh	r3, [r3, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d110      	bne.n	8003a00 <USBD_StdItfReq+0x74>
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fd2f 	bl	8004448 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80039ea:	e009      	b.n	8003a00 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fc80 	bl	80042f4 <USBD_CtlError>
          break;
 80039f4:	e004      	b.n	8003a00 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fc7b 	bl	80042f4 <USBD_CtlError>
          break;
 80039fe:	e000      	b.n	8003a02 <USBD_StdItfReq+0x76>
          break;
 8003a00:	bf00      	nop
      }
      break;
 8003a02:	e004      	b.n	8003a0e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fc74 	bl	80042f4 <USBD_CtlError>
      break;
 8003a0c:	bf00      	nop
  }

  return USBD_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	889b      	ldrh	r3, [r3, #4]
 8003a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d004      	beq.n	8003a42 <USBD_StdEPReq+0x2a>
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d002      	beq.n	8003a42 <USBD_StdEPReq+0x2a>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <USBD_StdEPReq+0x3a>
 8003a40:	e13d      	b.n	8003cbe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	6839      	ldr	r1, [r7, #0]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
      break;
 8003a50:	e13a      	b.n	8003cc8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d10a      	bne.n	8003a74 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	e12a      	b.n	8003cca <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d03e      	beq.n	8003afa <USBD_StdEPReq+0xe2>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d002      	beq.n	8003a86 <USBD_StdEPReq+0x6e>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d070      	beq.n	8003b66 <USBD_StdEPReq+0x14e>
 8003a84:	e115      	b.n	8003cb2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d002      	beq.n	8003a96 <USBD_StdEPReq+0x7e>
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d015      	beq.n	8003ac0 <USBD_StdEPReq+0xa8>
 8003a94:	e02b      	b.n	8003aee <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a96:	7bbb      	ldrb	r3, [r7, #14]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <USBD_StdEPReq+0x9e>
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d009      	beq.n	8003ab6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 ff66 	bl	8004978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 ff62 	bl	8004978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003ab4:	e020      	b.n	8003af8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fc1b 	bl	80042f4 <USBD_CtlError>
              break;
 8003abe:	e01b      	b.n	8003af8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	885b      	ldrh	r3, [r3, #2]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <USBD_StdEPReq+0xce>
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d008      	beq.n	8003ae6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	88db      	ldrh	r3, [r3, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 ff49 	bl	8004978 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fcae 	bl	8004448 <USBD_CtlSendStatus>

              break;
 8003aec:	e004      	b.n	8003af8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fbff 	bl	80042f4 <USBD_CtlError>
              break;
 8003af6:	bf00      	nop
          }
          break;
 8003af8:	e0e0      	b.n	8003cbc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d002      	beq.n	8003b0a <USBD_StdEPReq+0xf2>
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d015      	beq.n	8003b34 <USBD_StdEPReq+0x11c>
 8003b08:	e026      	b.n	8003b58 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b0a:	7bbb      	ldrb	r3, [r7, #14]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <USBD_StdEPReq+0x112>
 8003b10:	7bbb      	ldrb	r3, [r7, #14]
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d009      	beq.n	8003b2a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003b16:	7bbb      	ldrb	r3, [r7, #14]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 ff2c 	bl	8004978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ff28 	bl	8004978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003b28:	e01c      	b.n	8003b64 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8003b2a:	6839      	ldr	r1, [r7, #0]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fbe1 	bl	80042f4 <USBD_CtlError>
              break;
 8003b32:	e017      	b.n	8003b64 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	885b      	ldrh	r3, [r3, #2]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d112      	bne.n	8003b62 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003b3c:	7bbb      	ldrb	r3, [r7, #14]
 8003b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 ff33 	bl	80049b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fc79 	bl	8004448 <USBD_CtlSendStatus>
              }
              break;
 8003b56:	e004      	b.n	8003b62 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fbca 	bl	80042f4 <USBD_CtlError>
              break;
 8003b60:	e000      	b.n	8003b64 <USBD_StdEPReq+0x14c>
              break;
 8003b62:	bf00      	nop
          }
          break;
 8003b64:	e0aa      	b.n	8003cbc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d002      	beq.n	8003b76 <USBD_StdEPReq+0x15e>
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d032      	beq.n	8003bda <USBD_StdEPReq+0x1c2>
 8003b74:	e097      	b.n	8003ca6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <USBD_StdEPReq+0x174>
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d004      	beq.n	8003b8c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8003b82:	6839      	ldr	r1, [r7, #0]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fbb5 	bl	80042f4 <USBD_CtlError>
                break;
 8003b8a:	e091      	b.n	8003cb0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da0b      	bge.n	8003bac <USBD_StdEPReq+0x194>
 8003b94:	7bbb      	ldrb	r3, [r7, #14]
 8003b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	e00b      	b.n	8003bc4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003bac:	7bbb      	ldrb	r3, [r7, #14]
 8003bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fbf8 	bl	80043c8 <USBD_CtlSendData>
              break;
 8003bd8:	e06a      	b.n	8003cb0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8003bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da11      	bge.n	8003c06 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003be2:	7bbb      	ldrb	r3, [r7, #14]
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d117      	bne.n	8003c2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fb78 	bl	80042f4 <USBD_CtlError>
                  break;
 8003c04:	e054      	b.n	8003cb0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003c22:	6839      	ldr	r1, [r7, #0]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fb65 	bl	80042f4 <USBD_CtlError>
                  break;
 8003c2a:	e041      	b.n	8003cb0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0b      	bge.n	8003c4c <USBD_StdEPReq+0x234>
 8003c34:	7bbb      	ldrb	r3, [r7, #14]
 8003c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3310      	adds	r3, #16
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	e00b      	b.n	8003c64 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003c4c:	7bbb      	ldrb	r3, [r7, #14]
 8003c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003c66:	7bbb      	ldrb	r3, [r7, #14]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <USBD_StdEPReq+0x25a>
 8003c6c:	7bbb      	ldrb	r3, [r7, #14]
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d103      	bne.n	8003c7a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e00e      	b.n	8003c98 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 feb8 	bl	80049f4 <USBD_LL_IsStallEP>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e002      	b.n	8003c98 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fb92 	bl	80043c8 <USBD_CtlSendData>
              break;
 8003ca4:	e004      	b.n	8003cb0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fb23 	bl	80042f4 <USBD_CtlError>
              break;
 8003cae:	bf00      	nop
          }
          break;
 8003cb0:	e004      	b.n	8003cbc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fb1d 	bl	80042f4 <USBD_CtlError>
          break;
 8003cba:	bf00      	nop
      }
      break;
 8003cbc:	e004      	b.n	8003cc8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fb17 	bl	80042f4 <USBD_CtlError>
      break;
 8003cc6:	bf00      	nop
  }

  return ret;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	885b      	ldrh	r3, [r3, #2]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	f200 8128 	bhi.w	8003f4a <USBD_GetDescriptor+0x276>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <USBD_GetDescriptor+0x2c>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d75 	.word	0x08003d75
 8003d0c:	08003f4b 	.word	0x08003f4b
 8003d10:	08003f4b 	.word	0x08003f4b
 8003d14:	08003eeb 	.word	0x08003eeb
 8003d18:	08003f17 	.word	0x08003f17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	7c12      	ldrb	r2, [r2, #16]
 8003d28:	f107 0108 	add.w	r1, r7, #8
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4798      	blx	r3
 8003d30:	60f8      	str	r0, [r7, #12]
      break;
 8003d32:	e112      	b.n	8003f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7c1b      	ldrb	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f107 0208 	add.w	r2, r7, #8
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
 8003d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	2202      	movs	r2, #2
 8003d54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8003d56:	e100      	b.n	8003f5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f107 0208 	add.w	r2, r7, #8
 8003d64:	4610      	mov	r0, r2
 8003d66:	4798      	blx	r3
 8003d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	2202      	movs	r2, #2
 8003d70:	701a      	strb	r2, [r3, #0]
      break;
 8003d72:	e0f2      	b.n	8003f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	885b      	ldrh	r3, [r3, #2]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	f200 80ac 	bhi.w	8003ed8 <USBD_GetDescriptor+0x204>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <USBD_GetDescriptor+0xb4>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003da1 	.word	0x08003da1
 8003d8c:	08003dd5 	.word	0x08003dd5
 8003d90:	08003e09 	.word	0x08003e09
 8003d94:	08003e3d 	.word	0x08003e3d
 8003d98:	08003e71 	.word	0x08003e71
 8003d9c:	08003ea5 	.word	0x08003ea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	7c12      	ldrb	r2, [r2, #16]
 8003db8:	f107 0108 	add.w	r1, r7, #8
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
 8003dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003dc2:	e091      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa94 	bl	80042f4 <USBD_CtlError>
            err++;
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8003dd2:	e089      	b.n	8003ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	7c12      	ldrb	r2, [r2, #16]
 8003dec:	f107 0108 	add.w	r1, r7, #8
 8003df0:	4610      	mov	r0, r2
 8003df2:	4798      	blx	r3
 8003df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003df6:	e077      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa7a 	bl	80042f4 <USBD_CtlError>
            err++;
 8003e00:	7afb      	ldrb	r3, [r7, #11]
 8003e02:	3301      	adds	r3, #1
 8003e04:	72fb      	strb	r3, [r7, #11]
          break;
 8003e06:	e06f      	b.n	8003ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	7c12      	ldrb	r2, [r2, #16]
 8003e20:	f107 0108 	add.w	r1, r7, #8
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
 8003e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e2a:	e05d      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa60 	bl	80042f4 <USBD_CtlError>
            err++;
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	3301      	adds	r3, #1
 8003e38:	72fb      	strb	r3, [r7, #11]
          break;
 8003e3a:	e055      	b.n	8003ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	7c12      	ldrb	r2, [r2, #16]
 8003e54:	f107 0108 	add.w	r1, r7, #8
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4798      	blx	r3
 8003e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e5e:	e043      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa46 	bl	80042f4 <USBD_CtlError>
            err++;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8003e6e:	e03b      	b.n	8003ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	7c12      	ldrb	r2, [r2, #16]
 8003e88:	f107 0108 	add.w	r1, r7, #8
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
 8003e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003e92:	e029      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa2c 	bl	80042f4 <USBD_CtlError>
            err++;
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8003ea2:	e021      	b.n	8003ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	7c12      	ldrb	r2, [r2, #16]
 8003ebc:	f107 0108 	add.w	r1, r7, #8
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
 8003ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8003ec6:	e00f      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa12 	bl	80042f4 <USBD_CtlError>
            err++;
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8003ed6:	e007      	b.n	8003ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa0a 	bl	80042f4 <USBD_CtlError>
          err++;
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8003ee6:	e038      	b.n	8003f5a <USBD_GetDescriptor+0x286>
 8003ee8:	e037      	b.n	8003f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7c1b      	ldrb	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	f107 0208 	add.w	r2, r7, #8
 8003efe:	4610      	mov	r0, r2
 8003f00:	4798      	blx	r3
 8003f02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003f04:	e029      	b.n	8003f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f9f3 	bl	80042f4 <USBD_CtlError>
        err++;
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	3301      	adds	r3, #1
 8003f12:	72fb      	strb	r3, [r7, #11]
      break;
 8003f14:	e021      	b.n	8003f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7c1b      	ldrb	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f107 0208 	add.w	r2, r7, #8
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4798      	blx	r3
 8003f2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	2207      	movs	r2, #7
 8003f36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003f38:	e00f      	b.n	8003f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9d9 	bl	80042f4 <USBD_CtlError>
        err++;
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	3301      	adds	r3, #1
 8003f46:	72fb      	strb	r3, [r7, #11]
      break;
 8003f48:	e007      	b.n	8003f5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f9d1 	bl	80042f4 <USBD_CtlError>
      err++;
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	3301      	adds	r3, #1
 8003f56:	72fb      	strb	r3, [r7, #11]
      break;
 8003f58:	bf00      	nop
  }

  if (err != 0U)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11c      	bne.n	8003f9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <USBD_GetDescriptor+0x2b6>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	88db      	ldrh	r3, [r3, #6]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	88da      	ldrh	r2, [r3, #6]
 8003f72:	893b      	ldrh	r3, [r7, #8]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf28      	it	cs
 8003f78:	4613      	movcs	r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	461a      	mov	r2, r3
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa1f 	bl	80043c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	88db      	ldrh	r3, [r3, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fa58 	bl	8004448 <USBD_CtlSendStatus>
 8003f98:	e000      	b.n	8003f9c <USBD_GetDescriptor+0x2c8>
    return;
 8003f9a:	bf00      	nop
    }
  }
}
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop

08003fa4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	889b      	ldrh	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d130      	bne.n	8004018 <USBD_SetAddress+0x74>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	88db      	ldrh	r3, [r3, #6]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d12c      	bne.n	8004018 <USBD_SetAddress+0x74>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	885b      	ldrh	r3, [r3, #2]
 8003fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc4:	d828      	bhi.n	8004018 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	885b      	ldrh	r3, [r3, #2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d104      	bne.n	8003fe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f988 	bl	80042f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fe4:	e01c      	b.n	8004020 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fd23 	bl	8004a3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa25 	bl	8004448 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800400c:	e008      	b.n	8004020 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004016:	e003      	b.n	8004020 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f96a 	bl	80042f4 <USBD_CtlError>
  }
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	885b      	ldrh	r3, [r3, #2]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	4b41      	ldr	r3, [pc, #260]	; (8004140 <USBD_SetConfig+0x118>)
 800403a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800403c:	4b40      	ldr	r3, [pc, #256]	; (8004140 <USBD_SetConfig+0x118>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d904      	bls.n	800404e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f954 	bl	80042f4 <USBD_CtlError>
 800404c:	e075      	b.n	800413a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004054:	2b02      	cmp	r3, #2
 8004056:	d002      	beq.n	800405e <USBD_SetConfig+0x36>
 8004058:	2b03      	cmp	r3, #3
 800405a:	d023      	beq.n	80040a4 <USBD_SetConfig+0x7c>
 800405c:	e062      	b.n	8004124 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <USBD_SetConfig+0x118>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01a      	beq.n	800409c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <USBD_SetConfig+0x118>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2203      	movs	r2, #3
 8004074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <USBD_SetConfig+0x118>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff f9f4 	bl	800346c <USBD_SetClassConfig>
 8004084:	4603      	mov	r3, r0
 8004086:	2b02      	cmp	r3, #2
 8004088:	d104      	bne.n	8004094 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800408a:	6839      	ldr	r1, [r7, #0]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f931 	bl	80042f4 <USBD_CtlError>
            return;
 8004092:	e052      	b.n	800413a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9d7 	bl	8004448 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800409a:	e04e      	b.n	800413a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f9d3 	bl	8004448 <USBD_CtlSendStatus>
        break;
 80040a2:	e04a      	b.n	800413a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <USBD_SetConfig+0x118>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d112      	bne.n	80040d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <USBD_SetConfig+0x118>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <USBD_SetConfig+0x118>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff f9f0 	bl	80034aa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9bc 	bl	8004448 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80040d0:	e033      	b.n	800413a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <USBD_SetConfig+0x118>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d01d      	beq.n	800411c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff f9de 	bl	80034aa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <USBD_SetConfig+0x118>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <USBD_SetConfig+0x118>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff f9b4 	bl	800346c <USBD_SetClassConfig>
 8004104:	4603      	mov	r3, r0
 8004106:	2b02      	cmp	r3, #2
 8004108:	d104      	bne.n	8004114 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8f1 	bl	80042f4 <USBD_CtlError>
            return;
 8004112:	e012      	b.n	800413a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f997 	bl	8004448 <USBD_CtlSendStatus>
        break;
 800411a:	e00e      	b.n	800413a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f993 	bl	8004448 <USBD_CtlSendStatus>
        break;
 8004122:	e00a      	b.n	800413a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8e4 	bl	80042f4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <USBD_SetConfig+0x118>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff f9b9 	bl	80034aa <USBD_ClrClassConfig>
        break;
 8004138:	bf00      	nop
    }
  }
}
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000014d 	.word	0x2000014d

08004144 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	88db      	ldrh	r3, [r3, #6]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d004      	beq.n	8004160 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f8cb 	bl	80042f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800415e:	e021      	b.n	80041a4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004166:	2b01      	cmp	r3, #1
 8004168:	db17      	blt.n	800419a <USBD_GetConfig+0x56>
 800416a:	2b02      	cmp	r3, #2
 800416c:	dd02      	ble.n	8004174 <USBD_GetConfig+0x30>
 800416e:	2b03      	cmp	r3, #3
 8004170:	d00b      	beq.n	800418a <USBD_GetConfig+0x46>
 8004172:	e012      	b.n	800419a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3308      	adds	r3, #8
 800417e:	2201      	movs	r2, #1
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f920 	bl	80043c8 <USBD_CtlSendData>
        break;
 8004188:	e00c      	b.n	80041a4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2201      	movs	r2, #1
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f918 	bl	80043c8 <USBD_CtlSendData>
        break;
 8004198:	e004      	b.n	80041a4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8a9 	bl	80042f4 <USBD_CtlError>
        break;
 80041a2:	bf00      	nop
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041bc:	3b01      	subs	r3, #1
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d81e      	bhi.n	8004200 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	88db      	ldrh	r3, [r3, #6]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d004      	beq.n	80041d4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80041ca:	6839      	ldr	r1, [r7, #0]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f891 	bl	80042f4 <USBD_CtlError>
        break;
 80041d2:	e01a      	b.n	800420a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f043 0202 	orr.w	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	330c      	adds	r3, #12
 80041f4:	2202      	movs	r2, #2
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8e5 	bl	80043c8 <USBD_CtlSendData>
      break;
 80041fe:	e004      	b.n	800420a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f876 	bl	80042f4 <USBD_CtlError>
      break;
 8004208:	bf00      	nop
  }
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	885b      	ldrh	r3, [r3, #2]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f90b 	bl	8004448 <USBD_CtlSendStatus>
  }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800424a:	3b01      	subs	r3, #1
 800424c:	2b02      	cmp	r3, #2
 800424e:	d80b      	bhi.n	8004268 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	885b      	ldrh	r3, [r3, #2]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8f1 	bl	8004448 <USBD_CtlSendStatus>
      }
      break;
 8004266:	e004      	b.n	8004272 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f842 	bl	80042f4 <USBD_CtlError>
      break;
 8004270:	e000      	b.n	8004274 <USBD_ClrFeature+0x3a>
      break;
 8004272:	bf00      	nop
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	785a      	ldrb	r2, [r3, #1]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	3302      	adds	r3, #2
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b29a      	uxth	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	3303      	adds	r3, #3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3305      	adds	r3, #5
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	3306      	adds	r3, #6
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	3307      	adds	r3, #7
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	80da      	strh	r2, [r3, #6]

}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb39 	bl	8004978 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004306:	2100      	movs	r1, #0
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fb35 	bl	8004978 <USBD_LL_StallEP>
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d032      	beq.n	8004392 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f834 	bl	800439a <USBD_GetLen>
 8004332:	4603      	mov	r3, r0
 8004334:	3301      	adds	r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	75fa      	strb	r2, [r7, #23]
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4413      	add	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	75fa      	strb	r2, [r7, #23]
 8004358:	461a      	mov	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	2203      	movs	r2, #3
 8004360:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004362:	e012      	b.n	800438a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	60fa      	str	r2, [r7, #12]
 800436a:	7dfa      	ldrb	r2, [r7, #23]
 800436c:	1c51      	adds	r1, r2, #1
 800436e:	75f9      	strb	r1, [r7, #23]
 8004370:	4611      	mov	r1, r2
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	440a      	add	r2, r1
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	75fa      	strb	r2, [r7, #23]
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4413      	add	r3, r2
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e8      	bne.n	8004364 <USBD_GetString+0x4e>
    }
  }
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80043a6:	e005      	b.n	80043b4 <USBD_GetLen+0x1a>
  {
    len++;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	3301      	adds	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
    buf++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3301      	adds	r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f5      	bne.n	80043a8 <USBD_GetLen+0xe>
  }

  return len;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	2100      	movs	r1, #0
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fb43 	bl	8004a7c <USBD_LL_Transmit>

  return USBD_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	2100      	movs	r1, #0
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fb31 	bl	8004a7c <USBD_LL_Transmit>

  return USBD_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	2100      	movs	r1, #0
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fb42 	bl	8004ac2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2204      	movs	r2, #4
 8004454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004458:	2300      	movs	r3, #0
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fb0c 	bl	8004a7c <USBD_LL_Transmit>

  return USBD_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2205      	movs	r2, #5
 800447a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb1c 	bl	8004ac2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2212      	movs	r2, #18
 80044a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80044a6:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200000f0 	.word	0x200000f0

080044b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2204      	movs	r2, #4
 80044c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80044ca:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000104 	.word	0x20000104

080044dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <USBD_FS_ProductStrDescriptor+0x34>)
 80044f2:	4808      	ldr	r0, [pc, #32]	; (8004514 <USBD_FS_ProductStrDescriptor+0x38>)
 80044f4:	f7ff ff0f 	bl	8004316 <USBD_GetString>
 80044f8:	e004      	b.n	8004504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4904      	ldr	r1, [pc, #16]	; (8004510 <USBD_FS_ProductStrDescriptor+0x34>)
 80044fe:	4805      	ldr	r0, [pc, #20]	; (8004514 <USBD_FS_ProductStrDescriptor+0x38>)
 8004500:	f7ff ff09 	bl	8004316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004504:	4b02      	ldr	r3, [pc, #8]	; (8004510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000558 	.word	0x20000558
 8004514:	08004bfc 	.word	0x08004bfc

08004518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800452a:	f7ff fef4 	bl	8004316 <USBD_GetString>
  return USBD_StrDesc;
 800452e:	4b02      	ldr	r3, [pc, #8]	; (8004538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000558 	.word	0x20000558
 800453c:	08004c08 	.word	0x08004c08

08004540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	221a      	movs	r2, #26
 8004550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004552:	f000 f843 	bl	80045dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004556:	4b02      	ldr	r3, [pc, #8]	; (8004560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000108 	.word	0x20000108

08004564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	4907      	ldr	r1, [pc, #28]	; (8004598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800457a:	4808      	ldr	r0, [pc, #32]	; (800459c <USBD_FS_ConfigStrDescriptor+0x38>)
 800457c:	f7ff fecb 	bl	8004316 <USBD_GetString>
 8004580:	e004      	b.n	800458c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4904      	ldr	r1, [pc, #16]	; (8004598 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004586:	4805      	ldr	r0, [pc, #20]	; (800459c <USBD_FS_ConfigStrDescriptor+0x38>)
 8004588:	f7ff fec5 	bl	8004316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000558 	.word	0x20000558
 800459c:	08004c1c 	.word	0x08004c1c

080045a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	4907      	ldr	r1, [pc, #28]	; (80045d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80045b6:	4808      	ldr	r0, [pc, #32]	; (80045d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80045b8:	f7ff fead 	bl	8004316 <USBD_GetString>
 80045bc:	e004      	b.n	80045c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80045c2:	4805      	ldr	r0, [pc, #20]	; (80045d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80045c4:	f7ff fea7 	bl	8004316 <USBD_GetString>
  }
  return USBD_StrDesc;
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000558 	.word	0x20000558
 80045d8:	08004c2c 	.word	0x08004c2c

080045dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <Get_SerialNum+0x44>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <Get_SerialNum+0x48>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <Get_SerialNum+0x4c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004602:	2208      	movs	r2, #8
 8004604:	4909      	ldr	r1, [pc, #36]	; (800462c <Get_SerialNum+0x50>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f814 	bl	8004634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800460c:	2204      	movs	r2, #4
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <Get_SerialNum+0x54>)
 8004610:	68b8      	ldr	r0, [r7, #8]
 8004612:	f000 f80f 	bl	8004634 <IntToUnicode>
  }
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	1ffff7e8 	.word	0x1ffff7e8
 8004624:	1ffff7ec 	.word	0x1ffff7ec
 8004628:	1ffff7f0 	.word	0x1ffff7f0
 800462c:	2000010a 	.word	0x2000010a
 8004630:	2000011a 	.word	0x2000011a

08004634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
 800464a:	e027      	b.n	800469c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	2b09      	cmp	r3, #9
 8004652:	d80b      	bhi.n	800466c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	0f1b      	lsrs	r3, r3, #28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4619      	mov	r1, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	440b      	add	r3, r1
 8004664:	3230      	adds	r2, #48	; 0x30
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e00a      	b.n	8004682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4619      	mov	r1, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	440b      	add	r3, r1
 800467c:	3237      	adds	r2, #55	; 0x37
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	3301      	adds	r3, #1
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	3301      	adds	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
 800469c:	7dfa      	ldrb	r2, [r7, #23]
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3d3      	bcc.n	800464c <IntToUnicode+0x18>
  }
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a11      	ldr	r2, [pc, #68]	; (8004704 <HAL_PCD_MspInit+0x54>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d11b      	bne.n	80046fa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_PCD_MspInit+0x58>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4a10      	ldr	r2, [pc, #64]	; (8004708 <HAL_PCD_MspInit+0x58>)
 80046c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046cc:	61d3      	str	r3, [r2, #28]
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <HAL_PCD_MspInit+0x58>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	2013      	movs	r0, #19
 80046e0:	f7fc f96d 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80046e4:	2013      	movs	r0, #19
 80046e6:	f7fc f986 	bl	80009f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	2014      	movs	r0, #20
 80046f0:	f7fc f965 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80046f4:	2014      	movs	r0, #20
 80046f6:	f7fc f97e 	bl	80009f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40005c00 	.word	0x40005c00
 8004708:	40021000 	.word	0x40021000

0800470c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7fe fed4 	bl	80034d0 <USBD_LL_SetupStage>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	015b      	lsls	r3, r3, #5
 8004748:	4413      	add	r3, r2
 800474a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	4619      	mov	r1, r3
 8004754:	f7fe ff07 	bl	8003566 <USBD_LL_DataOutStage>
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	015b      	lsls	r3, r3, #5
 8004778:	4413      	add	r3, r2
 800477a:	333c      	adds	r3, #60	; 0x3c
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	4619      	mov	r1, r3
 8004782:	f7fe ff61 	bl	8003648 <USBD_LL_DataInStage>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff f871 	bl	8003884 <USBD_LL_SOF>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d001      	beq.n	80047c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80047be:	f7fb fd91 	bl	80002e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f821 	bl	8003814 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe ffda 	bl	8003792 <USBD_LL_Reset>
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f81b 	bl	8003832 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_PCD_SuspendCallback+0x30>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a03      	ldr	r2, [pc, #12]	; (8004818 <HAL_PCD_SuspendCallback+0x30>)
 800480a:	f043 0306 	orr.w	r3, r3, #6
 800480e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f815 	bl	800385a <USBD_LL_Resume>
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <USBD_LL_Init+0x78>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <USBD_LL_Init+0x78>)
 800484c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <USBD_LL_Init+0x78>)
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <USBD_LL_Init+0x7c>)
 8004854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <USBD_LL_Init+0x78>)
 8004858:	2208      	movs	r2, #8
 800485a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <USBD_LL_Init+0x78>)
 800485e:	2202      	movs	r2, #2
 8004860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <USBD_LL_Init+0x78>)
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <USBD_LL_Init+0x78>)
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <USBD_LL_Init+0x78>)
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004874:	480e      	ldr	r0, [pc, #56]	; (80048b0 <USBD_LL_Init+0x78>)
 8004876:	f7fc f8d8 	bl	8000a2a <HAL_PCD_Init>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004880:	f7fb fd30 	bl	80002e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800488a:	2318      	movs	r3, #24
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	f7fc ff5c 	bl	800174c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800489a:	2358      	movs	r3, #88	; 0x58
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	; 0x80
 80048a0:	f7fc ff54 	bl	800174c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000758 	.word	0x20000758
 80048b4:	40005c00 	.word	0x40005c00

080048b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc f98c 	bl	8000bec <HAL_PCD_Start>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f920 	bl	8004b20 <USBD_Get_USB_Status>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	4608      	mov	r0, r1
 80048f8:	4611      	mov	r1, r2
 80048fa:	461a      	mov	r2, r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	70fb      	strb	r3, [r7, #3]
 8004900:	460b      	mov	r3, r1
 8004902:	70bb      	strb	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004916:	78bb      	ldrb	r3, [r7, #2]
 8004918:	883a      	ldrh	r2, [r7, #0]
 800491a:	78f9      	ldrb	r1, [r7, #3]
 800491c:	f7fc fabf 	bl	8000e9e <HAL_PCD_EP_Open>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f8fa 	bl	8004b20 <USBD_Get_USB_Status>
 800492c:	4603      	mov	r3, r0
 800492e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004930:	7bbb      	ldrb	r3, [r7, #14]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc fb00 	bl	8000f5e <HAL_PCD_EP_Close>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f8db 	bl	8004b20 <USBD_Get_USB_Status>
 800496a:	4603      	mov	r3, r0
 800496c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800496e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fb96 	bl	80010c8 <HAL_PCD_EP_SetStall>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f8bc 	bl	8004b20 <USBD_Get_USB_Status>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fbd1 	bl	800117c <HAL_PCD_EP_ClrStall>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f89d 	bl	8004b20 <USBD_Get_USB_Status>
 80049e6:	4603      	mov	r3, r0
 80049e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da08      	bge.n	8004a22 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	015b      	lsls	r3, r3, #5
 8004a1a:	4413      	add	r3, r2
 8004a1c:	332a      	adds	r3, #42	; 0x2a
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	e008      	b.n	8004a34 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	015b      	lsls	r3, r3, #5
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004a32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc f9f9 	bl	8000e54 <HAL_PCD_SetAddress>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f859 	bl	8004b20 <USBD_Get_USB_Status>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	72fb      	strb	r3, [r7, #11]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	7af9      	ldrb	r1, [r7, #11]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	f7fc fad7 	bl	8001056 <HAL_PCD_EP_Transmit>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f836 	bl	8004b20 <USBD_Get_USB_Status>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	461a      	mov	r2, r3
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	7af9      	ldrb	r1, [r7, #11]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	f7fc fa7a 	bl	8000fe2 <HAL_PCD_EP_Receive>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 f813 	bl	8004b20 <USBD_Get_USB_Status>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004afe:	7dbb      	ldrb	r3, [r7, #22]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
	...

08004b20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d817      	bhi.n	8004b64 <USBD_Get_USB_Status+0x44>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <USBD_Get_USB_Status+0x1c>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b53 	.word	0x08004b53
 8004b44:	08004b59 	.word	0x08004b59
 8004b48:	08004b5f 	.word	0x08004b5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b50:	e00b      	b.n	8004b6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b52:	2302      	movs	r3, #2
 8004b54:	73fb      	strb	r3, [r7, #15]
    break;
 8004b56:	e008      	b.n	8004b6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8004b5c:	e005      	b.n	8004b6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	73fb      	strb	r3, [r7, #15]
    break;
 8004b62:	e002      	b.n	8004b6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004b64:	2302      	movs	r3, #2
 8004b66:	73fb      	strb	r3, [r7, #15]
    break;
 8004b68:	bf00      	nop
  }
  return usb_status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	4e0c      	ldr	r6, [pc, #48]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7e:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b80:	1ba4      	subs	r4, r4, r6
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	42a5      	cmp	r5, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	f000 f822 	bl	8004bd0 <_init>
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	4e0a      	ldr	r6, [pc, #40]	; (8004bb8 <__libc_init_array+0x40>)
 8004b90:	4c0a      	ldr	r4, [pc, #40]	; (8004bbc <__libc_init_array+0x44>)
 8004b92:	1ba4      	subs	r4, r4, r6
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	42a5      	cmp	r5, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba0:	4798      	blx	r3
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004baa:	4798      	blx	r3
 8004bac:	3501      	adds	r5, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08004c4c 	.word	0x08004c4c
 8004bb4:	08004c4c 	.word	0x08004c4c
 8004bb8:	08004c4c 	.word	0x08004c4c
 8004bbc:	08004c50 	.word	0x08004c50

08004bc0 <memset>:
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4402      	add	r2, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
